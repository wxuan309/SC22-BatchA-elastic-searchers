{"backend_state":"running","connection_file":"/projects/013ca607-9af4-4b8b-9eb4-c9fa83e65e2d/.local/share/jupyter/runtime/kernel-63ef8593-64b4-4398-9c20-29ae14013574.json","kernel":"elastic-searchers","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.12"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1655410547355,"exec_count":2,"id":"b6bdd6","input":"#Original scientific paper concluded that 'Age', ‘Family_diabetes’, ‘Physically active’, ‘Regular Medicine’ and ‘Pdiabetes’ were the most important factors and prove useful to predicting whether or not someone has diabetes. They used a ratio of 75:25.","kernel":"elastic-searchers","no_halt":true,"pos":3,"start":1655410547350,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410547428,"exec_count":5,"id":"267f6c","input":"diabetes.tail()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Family_Diabetes</th>\n      <th>highBP</th>\n      <th>PhysicallyActive</th>\n      <th>BMI</th>\n      <th>Smoking</th>\n      <th>Alcohol</th>\n      <th>Sleep</th>\n      <th>SoundSleep</th>\n      <th>RegularMedicine</th>\n      <th>JunkFood</th>\n      <th>Stress</th>\n      <th>BPLevel</th>\n      <th>Pregancies</th>\n      <th>Pdiabetes</th>\n      <th>UriationFreq</th>\n      <th>Diabetic</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>948</th>\n      <td>60 or older</td>\n      <td>Male</td>\n      <td>yes</td>\n      <td>yes</td>\n      <td>more than half an hr</td>\n      <td>27.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>yes</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>high</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>quite often</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>949</th>\n      <td>60 or older</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>none</td>\n      <td>23.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>yes</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>high</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>950</th>\n      <td>60 or older</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>less than half an hr</td>\n      <td>27.0</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>yes</td>\n      <td>occasionally</td>\n      <td>very often</td>\n      <td>high</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>951</th>\n      <td>60 or older</td>\n      <td>Female</td>\n      <td>yes</td>\n      <td>yes</td>\n      <td>one hr or more</td>\n      <td>30.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>7.0</td>\n      <td>4.0</td>\n      <td>yes</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>high</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>quite often</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>952</th>\n      <td>$$$$$$</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"             Age  Gender Family_Diabetes highBP      PhysicallyActive   BMI  \\\n948  60 or older    Male             yes    yes  more than half an hr  27.0   \n949  60 or older    Male              no    yes                  none  23.0   \n950  60 or older    Male              no    yes  less than half an hr  27.0   \n951  60 or older  Female             yes    yes        one hr or more  30.0   \n952       $$$$$$     NaN             NaN    NaN                   NaN   NaN   \n\n    Smoking Alcohol  Sleep  SoundSleep RegularMedicine      JunkFood  \\\n948      no      no    6.0         5.0             yes  occasionally   \n949      no      no    6.0         5.0             yes  occasionally   \n950      no     yes    6.0         5.0             yes  occasionally   \n951      no      no    7.0         4.0             yes  occasionally   \n952     NaN     NaN    NaN         NaN             NaN           NaN   \n\n         Stress BPLevel  Pregancies Pdiabetes UriationFreq Diabetic  \n948   sometimes    high         0.0         0  quite often      yes  \n949   sometimes    high         0.0         0     not much       no  \n950  very often    high         0.0         0     not much       no  \n951   sometimes    high         2.0         0  quite often      yes  \n952         NaN     NaN         NaN       NaN          NaN      NaN  "},"exec_count":5}},"pos":6,"scrolled":true,"start":1655410547381,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410547443,"exec_count":6,"id":"0653c0","input":"print(diabetes.columns)\nprint(\"\")\nprint(diabetes.shape)","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"name":"stdout","text":"Index(['Age', 'Gender', 'Family_Diabetes', 'highBP', 'PhysicallyActive', 'BMI',\n       'Smoking', 'Alcohol', 'Sleep', 'SoundSleep', 'RegularMedicine',\n       'JunkFood', 'Stress', 'BPLevel', 'Pregancies', 'Pdiabetes',\n       'UriationFreq', 'Diabetic'],\n      dtype='object')\n\n(953, 18)\n"}},"pos":7,"start":1655410547442,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410547465,"exec_count":7,"id":"91873a","input":"diabetes.info()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 953 entries, 0 to 952\nData columns (total 18 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   Age               953 non-null    object \n 1   Gender            952 non-null    object \n 2   Family_Diabetes   952 non-null    object \n 3   highBP            952 non-null    object \n 4   PhysicallyActive  952 non-null    object \n 5   BMI               948 non-null    float64\n 6   Smoking           952 non-null    object \n 7   Alcohol           952 non-null    object \n 8   Sleep             952 non-null    float64\n 9   SoundSleep        952 non-null    float64\n 10  RegularMedicine   952 non-null    object \n 11  JunkFood          952 non-null    object \n 12  Stress            952 non-null    object \n 13  BPLevel           952 non-null    object \n 14  Pregancies        910 non-null    float64\n 15  Pdiabetes         951 non-null    object \n 16  UriationFreq      952 non-null    object \n 17  Diabetic          951 non-null    object \ndtypes: float64(4), object(14)\nmemory usage: 134.1+ KB\n"}},"pos":8,"start":1655410547450,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410547840,"exec_count":11,"id":"4edca4","input":"#the relationship between pregnancies and glucose levels\nimport plotly.express as px\nfig = px.violin(diabetes, x=\"Gender_Female\", y=\"Age_60 or older\",color=\"Gender_Female\",\n            title=\" Age, Gender and Body Mass Index of Diabetic Patitents\")\n\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"b2e2155f235546e324df0c1662026392b917e9ff"}}},"pos":14,"start":1655410547533,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410547927,"exec_count":12,"id":"87caff","input":"#BMI, age, diabetic\ndf = diabetes\nfig = px.bar(df, x=\"Diabetic\", y=\"BMI\", barmode=\"group\", color = \"Age_60 or older\", title=\"BMI in Diabetics and Non-Diabetics relating to age group\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"16022c4cab0999759c894df5dbcba7791fae6c1d"}}},"pos":15,"start":1655410547849,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410548007,"exec_count":13,"id":"2d114d","input":"# Stress always and Quality Sleep\ndf = diabetes\nfig = px.violin(df, x=\"Stress_always\", y=\"SoundSleep\", color= \"Diabetic\", title=\"Quality sleep in relation to stress\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"62c8665811494953f47c9e1cfa86ca1d6f407162"}}},"pos":16,"start":1655410547931,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410548234,"exec_count":14,"id":"9a51ee","input":"# Stress always and Quality Sleep\ndf = diabetes\nfig = px.violin(df, x=\"Stress_not at all\", y=\"SoundSleep\", color= \"Diabetic\", title=\"Quality sleep in relation to stress\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"a3e51a7db42957e7de4fd42a33a2ed1c85154a6b"}}},"pos":17,"start":1655410548015,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410548307,"exec_count":15,"id":"72d4e4","input":"# Blood Pressure and Alcohol\ndf = diabetes\nfig = px.bar(df, x=\"Alcohol_yes\", y=\"BPLevel_high\", color=\"BPLevel_high\") \nfig.update_layout(\n    title=\"Alcohol and blood pressure\",)\n\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"37ea3802a53719c81ccb6d98c3bdd7c250b73010"}}},"pos":18,"scrolled":false,"start":1655410548246,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410548379,"exec_count":16,"id":"d3a58e","input":"# Gender and BMI\ndf= diabetes\nfig = px.bar(df, x=\"Gender_Female\", y=\"BMI\", color=\"BMI\")\n\nfig.update_layout(\n    title=\"Gender and Body Mass Index\",)\n\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"1a05427e21c2f88859ca94ba8c21bc7cb3965229"}}},"pos":19,"start":1655410548311,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410548451,"exec_count":17,"id":"dc63a9","input":"# BMI and Gender\ndf= diabetes\nfig = px.violin(df, x=\"Gender_Male\", y=\"BMI\", color=\"Gender_Male\")\n\nfig.update_layout(\n    title=\"BMI of Males\",)\n\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"99b812f2093e963ce1751f0fe82b46c97bf92712"}}},"pos":20,"start":1655410548401,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410548536,"exec_count":18,"id":"89c8b4","input":"# sleep and Age\ndf= diabetes\nfig = px.scatter(df, x=\"Sleep\", y=\"Age_60 or older\", color=\"Age_60 or older\")\n\nfig.update_layout(\n    title=\"Sleep concived through different Age categories\",)\n\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"cea5ed0022940e6fe4714b01eb1f0e82f2d84fe4"}}},"pos":21,"start":1655410548459,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410548612,"exec_count":19,"id":"52ec3a","input":"df = diabetes\nfig = px.bar(df, x=\"Diabetic\", y=\"BMI\", barmode='group', color = \"Diabetic\", height=400, title='BMI of diabetics compared to non-diabetics')\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"f994f9615af81cb6ce048f82db14488b9355fefe"}}},"pos":22,"start":1655410548549,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410548692,"exec_count":20,"id":"38c437","input":"#BMI, age, diabetic\nfig = px.bar(df, x=\"Stress_not at all\", y=\"Age_60 or older\", color = \"Age_60 or older\", \n             title=\"\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"83d18d063de6292c3272149d75fed897074a79f6"}}},"pos":23,"start":1655410548625,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410548757,"exec_count":21,"id":"d5a7db","input":"#BMI, age, diabetic\nfig = px.bar(df, x=\"Stress_always\", y=\"Gender_Female\", barmode=\"group\", color = \"Age_60 or older\", title=\"BMI in Diabetics and Non-Diabetics relating to age group\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"c9db4bdd03bf47675b434160acd839056cef8aa8"}}},"pos":24,"start":1655410548696,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410548841,"exec_count":22,"id":"afe916","input":"\nfig = px.bar(df, x=\"Diabetic\", y=\"Stress_always\", barmode=\"group\", color = \"Age_60 or older\", title=\"BMI in Diabetics and Non-Diabetics relating to age group\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"e8a0f58b72f70340cb394703817b28d2f67d3010"}}},"pos":25,"start":1655410548769,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410548904,"exec_count":23,"id":"f84403","input":"#BMI, age, diabetic\nfig = px.bar(df, x=\"JunkFood_very often\", y=\"Diabetic\", barmode=\"group\", color = \"Diabetic\",\n             title=\"Determining if Junkfood affects Diabetic People\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"769cd91742da12f47c1a801cd75219ab25522cad"}}},"pos":26,"start":1655410548849,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410549003,"exec_count":24,"id":"397795","input":"#Age and Physical Activity\nfig = px.violin(df, x= \"PhysicallyActive_one hr or more\", y=\"Age_60 or older\", color=\"Diabetic\", title = 'Physical Activity Relating to Age in Diabetic and Non Diabetic People')\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"0c62d50a753eb2f8e19fca81ac57e6d172764b06"}}},"pos":27,"start":1655410548916,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410549197,"exec_count":25,"id":"febf4f","input":"#Age and Physical Activity\nfig = px.violin(df, x= \"PhysicallyActive_none\", y=\"Age_60 or older\", color=\"Diabetic\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"c58e039de232c34acc4bd3987ccdf087737a328c"}}},"pos":28,"start":1655410549031,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410549309,"exec_count":26,"id":"60ed72","input":"#Blood Pressure and Physical Activity in older people\nfig = px.violin(df, x= \"PhysicallyActive_less than half an hr\", y=\"BPLevel_high\", color=\"Age_60 or older\",\n               title='Physical Activity affect Blood Pressure in older people')\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"ff0f911d1f11c3d790629714bc6c7e0b1f5c05b1"}}},"pos":29,"start":1655410549215,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410549391,"exec_count":27,"id":"ac31a1","input":"#BMI, age, diabetic\nfig = px.bar(df, x=\"Stress_always\", y=\"Smoking_yes\", barmode=\"group\", color = \"Stress_always\", title=\"Does Smoking affect Stress levels?\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"fc7bbaf4c6674e9178525a901eaa731556ddce2f"}}},"pos":30,"start":1655410549320,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410549466,"exec_count":28,"id":"bc7687","input":"#Family_diabetes Pdiabetes \nfig = px.bar(df, x= \"Family_Diabetes_yes\", y=\"Pdiabetes_yes\", barmode = 'group', color=\"Diabetic\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"7c22d97e2e3e57c3a59d0cf4f256b41a7183eeaf"}}},"pos":31,"start":1655410549404,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410549573,"exec_count":29,"id":"fcb44a","input":"#Family_diabetes Pdiabetes \nfig= px.violin(df, x= \"RegularMedicine_yes\", y=\"Age_60 or older\", color=\"Diabetic\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"cb36b33a54e8a276adb8a2bf03a3b506c11fe124"}}},"pos":32,"start":1655410549477,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410549684,"exec_count":30,"id":"d2898c","input":"df = diabetes\nfig = px.bar(df, x=\"Stress_very often\", y=\"SoundSleep\", barmode=\"group\", color = \"SoundSleep\", title=\" Sleep Concived Affecting Stress\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"adcba169bb282b03fe47f85a5b2896f370d1dc17"}}},"pos":33,"scrolled":false,"start":1655410549596,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410550581,"exec_count":34,"id":"ce428e","input":"diabetes","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>BMI</th>\n      <th>Sleep</th>\n      <th>SoundSleep</th>\n      <th>Pregancies</th>\n      <th>Diabetic</th>\n      <th>Age_40-49</th>\n      <th>Age_50-59</th>\n      <th>Age_60 or older</th>\n      <th>Age_less than 40</th>\n      <th>Gender_Female</th>\n      <th>...</th>\n      <th>BPLevel_High</th>\n      <th>BPLevel_Low</th>\n      <th>BPLevel_high</th>\n      <th>BPLevel_low</th>\n      <th>BPLevel_normal</th>\n      <th>BPLevel_normal</th>\n      <th>Pdiabetes_0</th>\n      <th>Pdiabetes_yes</th>\n      <th>UriationFreq_not much</th>\n      <th>UriationFreq_quite often</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>39.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>28.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>24.0</td>\n      <td>6.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>27.0</td>\n      <td>8.0</td>\n      <td>8.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>900</th>\n      <td>25.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>901</th>\n      <td>27.0</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>902</th>\n      <td>23.0</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>903</th>\n      <td>27.0</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>904</th>\n      <td>30.0</td>\n      <td>7.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>905 rows × 44 columns</p>\n</div>","text/plain":"      BMI  Sleep  SoundSleep  Pregancies  Diabetic  Age_40-49  Age_50-59  \\\n0    39.0    8.0         6.0         0.0         0          0          1   \n1    28.0    8.0         6.0         0.0         0          0          1   \n2    24.0    6.0         6.0         0.0         0          1          0   \n3    23.0    8.0         6.0         0.0         0          0          1   \n4    27.0    8.0         8.0         0.0         0          1          0   \n..    ...    ...         ...         ...       ...        ...        ...   \n900  25.0    8.0         6.0         0.0         1          0          0   \n901  27.0    6.0         5.0         0.0         1          0          0   \n902  23.0    6.0         5.0         0.0         0          0          0   \n903  27.0    6.0         5.0         0.0         0          0          0   \n904  30.0    7.0         4.0         2.0         1          0          0   \n\n     Age_60 or older  Age_less than 40  Gender_Female  ...  BPLevel_High  \\\n0                  0                 0              0  ...             0   \n1                  0                 0              0  ...             0   \n2                  0                 0              0  ...             0   \n3                  0                 0              0  ...             0   \n4                  0                 0              0  ...             0   \n..               ...               ...            ...  ...           ...   \n900                0                 1              0  ...             0   \n901                1                 0              0  ...             0   \n902                1                 0              0  ...             0   \n903                1                 0              0  ...             0   \n904                1                 0              1  ...             0   \n\n     BPLevel_Low  BPLevel_high  BPLevel_low  BPLevel_normal  BPLevel_normal   \\\n0              0             1            0               0                0   \n1              0             0            0               1                0   \n2              0             0            0               1                0   \n3              0             0            0               1                0   \n4              0             0            0               1                0   \n..           ...           ...          ...             ...              ...   \n900            0             0            0               1                0   \n901            0             1            0               0                0   \n902            0             1            0               0                0   \n903            0             1            0               0                0   \n904            0             1            0               0                0   \n\n     Pdiabetes_0  Pdiabetes_yes  UriationFreq_not much  \\\n0              1              0                      1   \n1              1              0                      1   \n2              1              0                      1   \n3              1              0                      1   \n4              1              0                      1   \n..           ...            ...                    ...   \n900            1              0                      1   \n901            1              0                      0   \n902            1              0                      1   \n903            1              0                      1   \n904            1              0                      0   \n\n     UriationFreq_quite often  \n0                           0  \n1                           0  \n2                           0  \n3                           0  \n4                           0  \n..                        ...  \n900                         0  \n901                         1  \n902                         0  \n903                         0  \n904                         1  \n\n[905 rows x 44 columns]"},"exec_count":34}},"pos":40,"scrolled":true,"start":1655410550564,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410552018,"exec_count":41,"id":"8255d7","input":"# hyperparameter tuning","kernel":"elastic-searchers","no_halt":true,"pos":47,"start":1655410552016,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410552258,"exec_count":42,"id":"85995d","input":"# term 1 RANDOM FOREST\nconf_matrix(y_test, y_pred_rfc)\nget_scores(y_test, y_pred_rfc, y_prob_rfc[:, 1])\nacc_rfc = accuracy_score(y_test, y_pred_rfc)\nf1_rfc = f1_score(y_test, y_pred_rfc)","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"image/png":"6e78f3c06b46fe0808cb408b001d6fbbd3423606","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":48,"start":1655410552038,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410552401,"exec_count":43,"id":"25bdc6","input":"# term 2 LOGISTIC REGRESSION\nconf_matrix(y_test, y_pred_reg) \nget_scores(y_test, y_pred_reg, y_prob_reg[:, 1])\nacc_reg = accuracy_score(y_test, y_pred_reg)\nf1_reg = f1_score(y_test, y_pred_reg)","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"image/png":"0a7814ee14fdde05c1cea2d2fad02d1e1c3a917d","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":49,"start":1655410552266,"state":"done","type":"cell"}
{"cell_type":"code","end":1655410578328,"exec_count":48,"id":"5a9fd4","input":"diabetes.head()","kernel":"elastic-searchers","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>BMI</th>\n      <th>Sleep</th>\n      <th>SoundSleep</th>\n      <th>Pregancies</th>\n      <th>Diabetic</th>\n      <th>Age_40-49</th>\n      <th>Age_50-59</th>\n      <th>Age_60 or older</th>\n      <th>Age_less than 40</th>\n      <th>Gender_Female</th>\n      <th>...</th>\n      <th>BPLevel_High</th>\n      <th>BPLevel_Low</th>\n      <th>BPLevel_high</th>\n      <th>BPLevel_low</th>\n      <th>BPLevel_normal</th>\n      <th>BPLevel_normal</th>\n      <th>Pdiabetes_0</th>\n      <th>Pdiabetes_yes</th>\n      <th>UriationFreq_not much</th>\n      <th>UriationFreq_quite often</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>39.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>28.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>24.0</td>\n      <td>6.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>27.0</td>\n      <td>8.0</td>\n      <td>8.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 44 columns</p>\n</div>","text/plain":"    BMI  Sleep  SoundSleep  Pregancies  Diabetic  Age_40-49  Age_50-59  \\\n0  39.0    8.0         6.0         0.0         0          0          1   \n1  28.0    8.0         6.0         0.0         0          0          1   \n2  24.0    6.0         6.0         0.0         0          1          0   \n3  23.0    8.0         6.0         0.0         0          0          1   \n4  27.0    8.0         8.0         0.0         0          1          0   \n\n   Age_60 or older  Age_less than 40  Gender_Female  ...  BPLevel_High  \\\n0                0                 0              0  ...             0   \n1                0                 0              0  ...             0   \n2                0                 0              0  ...             0   \n3                0                 0              0  ...             0   \n4                0                 0              0  ...             0   \n\n   BPLevel_Low  BPLevel_high  BPLevel_low  BPLevel_normal  BPLevel_normal   \\\n0            0             1            0               0                0   \n1            0             0            0               1                0   \n2            0             0            0               1                0   \n3            0             0            0               1                0   \n4            0             0            0               1                0   \n\n   Pdiabetes_0  Pdiabetes_yes  UriationFreq_not much  UriationFreq_quite often  \n0            1              0                      1                         0  \n1            1              0                      1                         0  \n2            1              0                      1                         0  \n3            1              0                      1                         0  \n4            1              0                      1                         0  \n\n[5 rows x 44 columns]"},"exec_count":48}},"pos":5,"scrolled":true,"start":1655410578314,"state":"done","type":"cell"}
{"cell_type":"code","end":1655411060254,"id":"cc7811","input":"#RANDOM FORESTS\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(criterion= 'gini', max_depth= 4, max_features='sqrt', n_estimators=200)\nrfc.fit(x_train, y_train)\ny_pred_rfc = rfc.predict(x_test)\ny_prob_rfc = rfc.predict_proba(x_test)\nconf_matrix(y_test, y_pred_rfc)\nget_scores(y_test, y_pred_rfc, y_prob_rfc[:, 1])\n#acc_rfc = accuracy_score(y_test, y_pred_rfc)\n#f1_rfc = f1_score(y_test, y_pred_rfc)","kernel":"elastic-searchers","pos":46,"start":1655411060254,"state":"done","type":"cell"}
{"cell_type":"code","end":1655411158535,"exec_count":67,"id":"58ef44","input":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics\nimport plotly.express as px\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\nimport sys, os","kernel":"elastic-searchers","pos":1,"start":1655411158530,"state":"done","type":"cell"}
{"cell_type":"code","end":1655411161018,"exec_count":68,"id":"d5c7e5","input":"diabetes = pd.read_csv(\"./Data/diabetes_dataset__2019.csv\")","kernel":"elastic-searchers","pos":4,"start":1655411161002,"state":"done","type":"cell"}
{"cell_type":"code","end":1655411168733,"exec_count":69,"id":"e739a3","input":"#cleaning the data -- dropping missing and duplicate values for sanity\ndiabetes.dropna(inplace = True)\ndiabetes = diabetes.reset_index(drop=True)\n\nlength = len(diabetes.index) #save length of array of later\nlength","kernel":"elastic-searchers","output":{"0":{"data":{"text/plain":"905"},"exec_count":69}},"pos":10,"start":1655411168710,"state":"done","type":"cell"}
{"cell_type":"code","end":1655411169430,"exec_count":70,"id":"47815f","input":"#converting categorical variables into dummy variables\ncol_category = ['Age','Gender','Family_Diabetes','highBP','PhysicallyActive','Smoking','Alcohol','RegularMedicine',\n                'JunkFood','Stress','BPLevel','Pdiabetes','UriationFreq']\nfor col in col_category:\n    diabetes = pd.concat([diabetes.drop(col, axis=1), pd.get_dummies(diabetes[col], prefix=col, prefix_sep='_')], axis=1)","kernel":"elastic-searchers","pos":11,"start":1655411169400,"state":"done","type":"cell"}
{"cell_type":"code","end":1655411170129,"exec_count":71,"id":"bf1fd1","input":"#coverting target variable (yes/no) into 0s and 1s\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace('no', 0)\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace(' no', 0)\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace('yes', 1)\ndiabetes['Diabetic']","kernel":"elastic-searchers","output":{"0":{"data":{"text/plain":"0      0\n1      0\n2      0\n3      0\n4      0\n      ..\n900    1\n901    1\n902    0\n903    0\n904    1\nName: Diabetic, Length: 905, dtype: int64"},"exec_count":71}},"pos":12,"start":1655411170114,"state":"done","type":"cell"}
{"cell_type":"code","end":1655411177335,"exec_count":72,"id":"489269","input":"def conf_matrix(y, y_pred):\n    fig, ax =plt.subplots(figsize=(3,3))\n    labels=['No','Yes']\n    ax=sns.heatmap(confusion_matrix(y, y_pred), annot=True, cmap=\"Blues\", fmt='g', cbar=False)\n    ax.set_xlabel('\\nPredicted Values')\n    ax.set_ylabel('Actual Values')\n    plt.title('Pass or fail')\n    ax.xaxis.set_ticklabels(labels); ax.yaxis.set_ticklabels(labels);\n\ndef get_scores(y, y_pred, y_prob):\n    data={'Accuracy': np.round(accuracy_score(y, y_pred),3),\n    'Precision':np.round(precision_score(y, y_pred),3),\n    'Recall':np.round(recall_score(y, y_pred),3),\n    'F1':np.round(f1_score(y, y_pred),3),\n    'ROC AUC':np.round(roc_auc_score(y, y_prob),3)}\n    scores_df = pd.Series(data).to_frame('scores')\n    return scores_df","kernel":"elastic-searchers","pos":35,"start":1655411177324,"state":"done","type":"cell"}
{"cell_type":"code","end":1655411178501,"exec_count":73,"id":"c17ece","input":"X = diabetes[\"BMI\"].to_numpy().reshape(-1, 1)\ny = diabetes[\"Pdiabetes_yes\"].to_numpy().reshape(-1, 1)","kernel":"elastic-searchers","pos":36,"start":1655411178484,"state":"done","type":"cell"}
{"cell_type":"code","end":1655411191836,"exec_count":75,"id":"91eb84","input":"#split data into training and testing\ntrain, test = train_test_split(diabetes, test_size = 0.25, shuffle = True)","kernel":"elastic-searchers","pos":41,"start":1655411191809,"state":"done","type":"cell"}
{"cell_type":"code","end":1655411192890,"exec_count":76,"id":"8d1966","input":"xcols = train.columns\nx_train = train[xcols]\nx_test = test[xcols]\ny_train = train['Diabetic']\ny_test = test['Diabetic']","kernel":"elastic-searchers","pos":42,"start":1655411192878,"state":"done","type":"cell"}
{"cell_type":"code","end":1655411866466,"exec_count":86,"id":"15f99e","input":"# svm\n# https://www.geeksforgeeks.org/svm-hyperparameter-tuning-using-gridsearchcv-ml/\n\n# fitting the model for grid search\n\n\n# define parameter\ngrid_params_svm = {'C': [0.1, 1, 10, 100, 1000],\n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001, 'auto'],\n              'kernel': ['rbf','poly','linear','sigmoid']}\n\n\n# save grid search into gs_svm\ngs_svm = GridSearchCV(estimator = svm.SVC(probability=True),\n                           param_grid = grid_params_svm,\n                           cv = 5,\n                           verbose=0)\n\n\n# fit the model\ngs_svm_res = gs_svm.fit(x_train, y_train)\nprint(gs_svm_res.best_params_)","kernel":"elastic-searchers","output":{"0":{"name":"stdout","text":"{'C': 0.1, 'gamma': 1, 'kernel': 'poly'}\n"}},"pos":52,"start":1655411834603,"state":"done","type":"cell"}
{"cell_type":"code","end":1655413266219,"exec_count":118,"id":"63d4bb","input":"# logistic regression\n# dictionary = {key:value}\n# parameters = {parameter: []}\n# https://stackoverflow.com/questions/19018333/gridsearchcv-on-logisticregression-in-scikit-learn\n\ndictionary = {}\ngrid_params_reg = {'penalty':['l2'],\n                   'C':[1, 10, 100, 1000]}\n\ngs_reg = GridSearchCV(estimator = LogisticRegression(max_iter=500),\n                           param_grid = grid_params_reg,\n                           cv = 5,\n                           verbose=0)\ngs_reg_res = gs_reg.fit(x_train, y_train)\n\nerror_score = 'raise'\n\nprint(gs_reg_res.best_params_)","kernel":"elastic-searchers","output":{"0":{"name":"stdout","text":"{'C': 1, 'penalty': 'l2'}\n"}},"pos":51,"scrolled":true,"start":1655413264291,"state":"done","type":"cell"}
{"cell_type":"code","end":1655414183022,"exec_count":132,"id":"56555d","input":"#LOGISTIC REGRESSION\nfrom sklearn.linear_model import LogisticRegression\nreg = LogisticRegression(max_iter = 500, C = 1, penalty='l2')\nreg.fit(x_train, y_train)\ny_pred_reg = reg.predict(x_test)\ny_prob_reg = reg.predict_proba(x_test)\nconf_matrix(y_test, y_pred_reg)\nget_scores(y_test, y_pred_reg, y_prob_reg[:, 1])","kernel":"elastic-searchers","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>scores</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Accuracy</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Precision</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Recall</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>F1</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>ROC AUC</th>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"           scores\nAccuracy      1.0\nPrecision     1.0\nRecall        1.0\nF1            1.0\nROC AUC       1.0"},"exec_count":132},"1":{"data":{"image/png":"73d205568e4de4f7961764cb37fd9d8be6b92315","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":45,"start":1655414182426,"state":"done","type":"cell"}
{"cell_type":"code","end":1655415571643,"exec_count":133,"id":"7f19c6","input":"# random forest\ngrid_params_rfc = {'criterion' :['gini'],'bootstrap': [True, False],\n 'max_depth': [4,5,6,7,8,10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n 'max_features': ['sqrt'],\n 'min_samples_leaf': [1, 2, 4],\n 'min_samples_split': [2, 5, 10],\n 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}\n\ngs_rfc = GridSearchCV(estimator=RandomForestClassifier(), param_grid=grid_params_rfc, cv= 5)\ngs_rfc_res = gs_rfc.fit(x_train, y_train)\nprint(gs_rfc_res.best_params_)","kernel":"elastic-searchers","output":{"0":{"ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Input \u001b[0;32mIn [133]\u001b[0m, in \u001b[0;36m<cell line: 10>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m grid_params_rfc \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcriterion\u001b[39m\u001b[38;5;124m'\u001b[39m :[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgini\u001b[39m\u001b[38;5;124m'\u001b[39m],\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mbootstrap\u001b[39m\u001b[38;5;124m'\u001b[39m: [\u001b[38;5;28;01mTrue\u001b[39;00m, \u001b[38;5;28;01mFalse\u001b[39;00m],\n\u001b[1;32m      3\u001b[0m  \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmax_depth\u001b[39m\u001b[38;5;124m'\u001b[39m: [\u001b[38;5;241m4\u001b[39m,\u001b[38;5;241m5\u001b[39m,\u001b[38;5;241m6\u001b[39m,\u001b[38;5;241m7\u001b[39m,\u001b[38;5;241m8\u001b[39m,\u001b[38;5;241m10\u001b[39m, \u001b[38;5;241m20\u001b[39m, \u001b[38;5;241m30\u001b[39m, \u001b[38;5;241m40\u001b[39m, \u001b[38;5;241m50\u001b[39m, \u001b[38;5;241m60\u001b[39m, \u001b[38;5;241m70\u001b[39m, \u001b[38;5;241m80\u001b[39m, \u001b[38;5;241m90\u001b[39m, \u001b[38;5;241m100\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m],\n\u001b[1;32m      4\u001b[0m  \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmax_features\u001b[39m\u001b[38;5;124m'\u001b[39m: [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msqrt\u001b[39m\u001b[38;5;124m'\u001b[39m],\n\u001b[1;32m      5\u001b[0m  \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmin_samples_leaf\u001b[39m\u001b[38;5;124m'\u001b[39m: [\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m2\u001b[39m, \u001b[38;5;241m4\u001b[39m],\n\u001b[1;32m      6\u001b[0m  \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmin_samples_split\u001b[39m\u001b[38;5;124m'\u001b[39m: [\u001b[38;5;241m2\u001b[39m, \u001b[38;5;241m5\u001b[39m, \u001b[38;5;241m10\u001b[39m],\n\u001b[1;32m      7\u001b[0m  \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mn_estimators\u001b[39m\u001b[38;5;124m'\u001b[39m: [\u001b[38;5;241m200\u001b[39m, \u001b[38;5;241m400\u001b[39m, \u001b[38;5;241m600\u001b[39m, \u001b[38;5;241m800\u001b[39m, \u001b[38;5;241m1000\u001b[39m, \u001b[38;5;241m1200\u001b[39m, \u001b[38;5;241m1400\u001b[39m, \u001b[38;5;241m1600\u001b[39m, \u001b[38;5;241m1800\u001b[39m, \u001b[38;5;241m2000\u001b[39m]}\n\u001b[1;32m      9\u001b[0m gs_rfc \u001b[38;5;241m=\u001b[39m GridSearchCV(estimator\u001b[38;5;241m=\u001b[39mRandomForestClassifier(), param_grid\u001b[38;5;241m=\u001b[39mgrid_params_rfc, cv\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m)\n\u001b[0;32m---> 10\u001b[0m gs_rfc_res \u001b[38;5;241m=\u001b[39m \u001b[43mgs_rfc\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28mprint\u001b[39m(gs_rfc_res\u001b[38;5;241m.\u001b[39mbest_params_)\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/model_selection/_search.py:875\u001b[0m, in \u001b[0;36mBaseSearchCV.fit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    869\u001b[0m     results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_format_results(\n\u001b[1;32m    870\u001b[0m         all_candidate_params, n_splits, all_out, all_more_results\n\u001b[1;32m    871\u001b[0m     )\n\u001b[1;32m    873\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m results\n\u001b[0;32m--> 875\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_search\u001b[49m\u001b[43m(\u001b[49m\u001b[43mevaluate_candidates\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    877\u001b[0m \u001b[38;5;66;03m# multimetric is determined here because in the case of a callable\u001b[39;00m\n\u001b[1;32m    878\u001b[0m \u001b[38;5;66;03m# self.scoring the return type is only known after calling\u001b[39;00m\n\u001b[1;32m    879\u001b[0m first_test_score \u001b[38;5;241m=\u001b[39m all_out[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_scores\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/model_selection/_search.py:1375\u001b[0m, in \u001b[0;36mGridSearchCV._run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1373\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_run_search\u001b[39m(\u001b[38;5;28mself\u001b[39m, evaluate_candidates):\n\u001b[1;32m   1374\u001b[0m     \u001b[38;5;124;03m\"\"\"Search all candidates in param_grid\"\"\"\u001b[39;00m\n\u001b[0;32m-> 1375\u001b[0m     \u001b[43mevaluate_candidates\u001b[49m\u001b[43m(\u001b[49m\u001b[43mParameterGrid\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparam_grid\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/model_selection/_search.py:822\u001b[0m, in \u001b[0;36mBaseSearchCV.fit.<locals>.evaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    814\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbose \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    815\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\n\u001b[1;32m    816\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFitting \u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;124m folds for each of \u001b[39m\u001b[38;5;132;01m{1}\u001b[39;00m\u001b[38;5;124m candidates,\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    817\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m totalling \u001b[39m\u001b[38;5;132;01m{2}\u001b[39;00m\u001b[38;5;124m fits\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\n\u001b[1;32m    818\u001b[0m             n_splits, n_candidates, n_candidates \u001b[38;5;241m*\u001b[39m n_splits\n\u001b[1;32m    819\u001b[0m         )\n\u001b[1;32m    820\u001b[0m     )\n\u001b[0;32m--> 822\u001b[0m out \u001b[38;5;241m=\u001b[39m \u001b[43mparallel\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    823\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdelayed\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_fit_and_score\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    824\u001b[0m \u001b[43m        \u001b[49m\u001b[43mclone\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbase_estimator\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    825\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    826\u001b[0m \u001b[43m        \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    827\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtrain\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    828\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtest\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtest\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    829\u001b[0m \u001b[43m        \u001b[49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    830\u001b[0m \u001b[43m        \u001b[49m\u001b[43msplit_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43msplit_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_splits\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    831\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcandidate_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcand_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_candidates\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    832\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfit_and_score_kwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    833\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    834\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mcand_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparameters\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43msplit_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtest\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mproduct\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    835\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcandidate_params\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcv\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msplit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgroups\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    836\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    837\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    839\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m    840\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    841\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo fits were performed. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    842\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWas the CV iterator empty? \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    843\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWere there no candidates?\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    844\u001b[0m     )\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/joblib/parallel.py:1046\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1043\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdispatch_one_batch(iterator):\n\u001b[1;32m   1044\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_iterating \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_original_iterator \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m-> 1046\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdispatch_one_batch\u001b[49m\u001b[43m(\u001b[49m\u001b[43miterator\u001b[49m\u001b[43m)\u001b[49m:\n\u001b[1;32m   1047\u001b[0m     \u001b[38;5;28;01mpass\u001b[39;00m\n\u001b[1;32m   1049\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m pre_dispatch \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mall\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mor\u001b[39;00m n_jobs \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   1050\u001b[0m     \u001b[38;5;66;03m# The iterable was consumed all at once by the above for loop.\u001b[39;00m\n\u001b[1;32m   1051\u001b[0m     \u001b[38;5;66;03m# No need to wait for async callbacks to trigger to\u001b[39;00m\n\u001b[1;32m   1052\u001b[0m     \u001b[38;5;66;03m# consumption.\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/joblib/parallel.py:861\u001b[0m, in \u001b[0;36mParallel.dispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    859\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m    860\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 861\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_dispatch\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtasks\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    862\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/joblib/parallel.py:779\u001b[0m, in \u001b[0;36mParallel._dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    777\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[1;32m    778\u001b[0m     job_idx \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jobs)\n\u001b[0;32m--> 779\u001b[0m     job \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_backend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply_async\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbatch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcallback\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcb\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    780\u001b[0m     \u001b[38;5;66;03m# A job can complete so quickly than its callback is\u001b[39;00m\n\u001b[1;32m    781\u001b[0m     \u001b[38;5;66;03m# called before we get here, causing self._jobs to\u001b[39;00m\n\u001b[1;32m    782\u001b[0m     \u001b[38;5;66;03m# grow. To ensure correct results ordering, .insert is\u001b[39;00m\n\u001b[1;32m    783\u001b[0m     \u001b[38;5;66;03m# used (rather than .append) in the following line\u001b[39;00m\n\u001b[1;32m    784\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jobs\u001b[38;5;241m.\u001b[39minsert(job_idx, job)\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/joblib/_parallel_backends.py:208\u001b[0m, in \u001b[0;36mSequentialBackend.apply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_async\u001b[39m(\u001b[38;5;28mself\u001b[39m, func, callback\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m    207\u001b[0m     \u001b[38;5;124;03m\"\"\"Schedule a func to be run\"\"\"\u001b[39;00m\n\u001b[0;32m--> 208\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[43mImmediateResult\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    209\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m callback:\n\u001b[1;32m    210\u001b[0m         callback(result)\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/joblib/_parallel_backends.py:572\u001b[0m, in \u001b[0;36mImmediateResult.__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    569\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m, batch):\n\u001b[1;32m    570\u001b[0m     \u001b[38;5;66;03m# Don't delay the application, to avoid keeping the input\u001b[39;00m\n\u001b[1;32m    571\u001b[0m     \u001b[38;5;66;03m# arguments in memory\u001b[39;00m\n\u001b[0;32m--> 572\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mresults \u001b[38;5;241m=\u001b[39m \u001b[43mbatch\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/joblib/parallel.py:262\u001b[0m, in \u001b[0;36mBatchedCalls.__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    258\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    259\u001b[0m     \u001b[38;5;66;03m# Set the default nested backend to self._backend but do not set the\u001b[39;00m\n\u001b[1;32m    260\u001b[0m     \u001b[38;5;66;03m# change the default number of processes to -1\u001b[39;00m\n\u001b[1;32m    261\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m parallel_backend(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend, n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_n_jobs):\n\u001b[0;32m--> 262\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m [func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    263\u001b[0m                 \u001b[38;5;28;01mfor\u001b[39;00m func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mitems]\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/joblib/parallel.py:262\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    258\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    259\u001b[0m     \u001b[38;5;66;03m# Set the default nested backend to self._backend but do not set the\u001b[39;00m\n\u001b[1;32m    260\u001b[0m     \u001b[38;5;66;03m# change the default number of processes to -1\u001b[39;00m\n\u001b[1;32m    261\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m parallel_backend(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend, n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_n_jobs):\n\u001b[0;32m--> 262\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m [\u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    263\u001b[0m                 \u001b[38;5;28;01mfor\u001b[39;00m func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mitems]\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/utils/fixes.py:117\u001b[0m, in \u001b[0;36m_FuncWrapper.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    115\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m    116\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m config_context(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconfig):\n\u001b[0;32m--> 117\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfunction\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:686\u001b[0m, in \u001b[0;36m_fit_and_score\u001b[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, split_progress, candidate_progress, error_score)\u001b[0m\n\u001b[1;32m    684\u001b[0m         estimator\u001b[38;5;241m.\u001b[39mfit(X_train, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params)\n\u001b[1;32m    685\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 686\u001b[0m         \u001b[43mestimator\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfit_params\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    688\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[1;32m    689\u001b[0m     \u001b[38;5;66;03m# Note fit time as time until error\u001b[39;00m\n\u001b[1;32m    690\u001b[0m     fit_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mtime() \u001b[38;5;241m-\u001b[39m start_time\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/ensemble/_forest.py:465\u001b[0m, in \u001b[0;36mBaseForest.fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    460\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwarm_start \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mestimators_) \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    461\u001b[0m     \u001b[38;5;66;03m# We draw from the random state to get the random state we\u001b[39;00m\n\u001b[1;32m    462\u001b[0m     \u001b[38;5;66;03m# would have got if we hadn't used a warm_start.\u001b[39;00m\n\u001b[1;32m    463\u001b[0m     random_state\u001b[38;5;241m.\u001b[39mrandint(MAX_INT, size\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mestimators_))\n\u001b[0;32m--> 465\u001b[0m trees \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m    466\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_estimator(append\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, random_state\u001b[38;5;241m=\u001b[39mrandom_state)\n\u001b[1;32m    467\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(n_more_estimators)\n\u001b[1;32m    468\u001b[0m ]\n\u001b[1;32m    470\u001b[0m \u001b[38;5;66;03m# Parallel loop: we prefer the threading backend as the Cython code\u001b[39;00m\n\u001b[1;32m    471\u001b[0m \u001b[38;5;66;03m# for fitting the trees is internally releasing the Python GIL\u001b[39;00m\n\u001b[1;32m    472\u001b[0m \u001b[38;5;66;03m# making threading more efficient than multiprocessing in\u001b[39;00m\n\u001b[1;32m    473\u001b[0m \u001b[38;5;66;03m# that case. However, for joblib 0.12+ we respect any\u001b[39;00m\n\u001b[1;32m    474\u001b[0m \u001b[38;5;66;03m# parallel_backend contexts set at a higher level,\u001b[39;00m\n\u001b[1;32m    475\u001b[0m \u001b[38;5;66;03m# since correctness does not rely on using threads.\u001b[39;00m\n\u001b[1;32m    476\u001b[0m trees \u001b[38;5;241m=\u001b[39m Parallel(\n\u001b[1;32m    477\u001b[0m     n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_jobs,\n\u001b[1;32m    478\u001b[0m     verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbose,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    493\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m i, t \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(trees)\n\u001b[1;32m    494\u001b[0m )\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/ensemble/_forest.py:466\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    460\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwarm_start \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mestimators_) \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    461\u001b[0m     \u001b[38;5;66;03m# We draw from the random state to get the random state we\u001b[39;00m\n\u001b[1;32m    462\u001b[0m     \u001b[38;5;66;03m# would have got if we hadn't used a warm_start.\u001b[39;00m\n\u001b[1;32m    463\u001b[0m     random_state\u001b[38;5;241m.\u001b[39mrandint(MAX_INT, size\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mestimators_))\n\u001b[1;32m    465\u001b[0m trees \u001b[38;5;241m=\u001b[39m [\n\u001b[0;32m--> 466\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_make_estimator\u001b[49m\u001b[43m(\u001b[49m\u001b[43mappend\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrandom_state\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrandom_state\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    467\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(n_more_estimators)\n\u001b[1;32m    468\u001b[0m ]\n\u001b[1;32m    470\u001b[0m \u001b[38;5;66;03m# Parallel loop: we prefer the threading backend as the Cython code\u001b[39;00m\n\u001b[1;32m    471\u001b[0m \u001b[38;5;66;03m# for fitting the trees is internally releasing the Python GIL\u001b[39;00m\n\u001b[1;32m    472\u001b[0m \u001b[38;5;66;03m# making threading more efficient than multiprocessing in\u001b[39;00m\n\u001b[1;32m    473\u001b[0m \u001b[38;5;66;03m# that case. However, for joblib 0.12+ we respect any\u001b[39;00m\n\u001b[1;32m    474\u001b[0m \u001b[38;5;66;03m# parallel_backend contexts set at a higher level,\u001b[39;00m\n\u001b[1;32m    475\u001b[0m \u001b[38;5;66;03m# since correctness does not rely on using threads.\u001b[39;00m\n\u001b[1;32m    476\u001b[0m trees \u001b[38;5;241m=\u001b[39m Parallel(\n\u001b[1;32m    477\u001b[0m     n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_jobs,\n\u001b[1;32m    478\u001b[0m     verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbose,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    493\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m i, t \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(trees)\n\u001b[1;32m    494\u001b[0m )\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/ensemble/_base.py:163\u001b[0m, in \u001b[0;36mBaseEnsemble._make_estimator\u001b[0;34m(self, append, random_state)\u001b[0m\n\u001b[1;32m    157\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_make_estimator\u001b[39m(\u001b[38;5;28mself\u001b[39m, append\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, random_state\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m    158\u001b[0m     \u001b[38;5;124;03m\"\"\"Make and configure a copy of the `base_estimator_` attribute.\u001b[39;00m\n\u001b[1;32m    159\u001b[0m \n\u001b[1;32m    160\u001b[0m \u001b[38;5;124;03m    Warning: This method should be used to properly instantiate new\u001b[39;00m\n\u001b[1;32m    161\u001b[0m \u001b[38;5;124;03m    sub-estimators.\u001b[39;00m\n\u001b[1;32m    162\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 163\u001b[0m     estimator \u001b[38;5;241m=\u001b[39m \u001b[43mclone\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbase_estimator_\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    164\u001b[0m     estimator\u001b[38;5;241m.\u001b[39mset_params(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m{p: \u001b[38;5;28mgetattr\u001b[39m(\u001b[38;5;28mself\u001b[39m, p) \u001b[38;5;28;01mfor\u001b[39;00m p \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mestimator_params})\n\u001b[1;32m    166\u001b[0m     \u001b[38;5;66;03m# TODO: Remove in v1.2\u001b[39;00m\n\u001b[1;32m    167\u001b[0m     \u001b[38;5;66;03m# criterion \"mse\" and \"mae\" would cause warnings in every call to\u001b[39;00m\n\u001b[1;32m    168\u001b[0m     \u001b[38;5;66;03m# DecisionTreeRegressor.fit(..)\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/base.py:64\u001b[0m, in \u001b[0;36mclone\u001b[0;34m(estimator, safe)\u001b[0m\n\u001b[1;32m     62\u001b[0m estimator_type \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mtype\u001b[39m(estimator)\n\u001b[1;32m     63\u001b[0m \u001b[38;5;66;03m# XXX: not handling dictionaries\u001b[39;00m\n\u001b[0;32m---> 64\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m estimator_type \u001b[38;5;129;01min\u001b[39;00m (\u001b[38;5;28;43mlist\u001b[39;49m, \u001b[38;5;28mtuple\u001b[39m, \u001b[38;5;28mset\u001b[39m, \u001b[38;5;28mfrozenset\u001b[39m):\n\u001b[1;32m     65\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m estimator_type([clone(e, safe\u001b[38;5;241m=\u001b[39msafe) \u001b[38;5;28;01mfor\u001b[39;00m e \u001b[38;5;129;01min\u001b[39;00m estimator])\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(estimator, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mget_params\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(estimator, \u001b[38;5;28mtype\u001b[39m):\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}},"pos":50,"start":1655414205986,"state":"done","type":"cell"}
{"cell_type":"code","end":1655415576699,"exec_count":134,"id":"9d7108","input":"#SVMS\nfrom sklearn import svm\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n\nclf = svm.SVC(C= 0.1, gamma= 1, kernel= 'poly', probability= True)\nclf.fit(x_train,y_train)\ny_pred_clf = clf.predict(x_test)\ny_prob_clf = clf.predict_proba(x_test)\n\nconf_matrix(y_test, y_pred_clf)\nget_scores(y_test, y_pred_clf, y_prob_clf[:, 1])","kernel":"elastic-searchers","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>scores</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Accuracy</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Precision</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Recall</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>F1</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>ROC AUC</th>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"           scores\nAccuracy      1.0\nPrecision     1.0\nRecall        1.0\nF1            1.0\nROC AUC       1.0"},"exec_count":134},"1":{"data":{"image/png":"73d205568e4de4f7961764cb37fd9d8be6b92315","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":43,"start":1655415576462,"state":"done","type":"cell"}
{"cell_type":"code","end":1655415871159,"exec_count":139,"id":"701b43","input":"#SVM WITH STANDARD SCALER\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n#'svm__C': 0.1, 'svm__gamma': 1, 'svm__kernel': 'linear'\nclf2 = Pipeline(steps = [(\"scaler\", StandardScaler()), ('svm', SVC(kernel = 'linear', gamma='auto',  C = 0.1, probability = True))])\nclf2.fit(x_train, y_train)\ny_pred_clf2 = clf2.predict(x_test)\ny_prob_clf2 = clf2.predict_proba(x_test)\nconf_matrix(y_test, y_pred_clf2)\nget_scores(y_test, y_pred_clf2, y_prob_clf2[:, 1])","kernel":"elastic-searchers","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>scores</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Accuracy</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Precision</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Recall</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>F1</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>ROC AUC</th>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"           scores\nAccuracy      1.0\nPrecision     1.0\nRecall        1.0\nF1            1.0\nROC AUC       1.0"},"exec_count":139},"1":{"data":{"image/png":"73d205568e4de4f7961764cb37fd9d8be6b92315","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":44,"start":1655415870848,"state":"done","type":"cell"}
{"cell_type":"code","id":"7abd4f","input":"","pos":38,"type":"cell"}
{"cell_type":"code","id":"7edf91","input":"","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"52caef","input":"### Exploratory Data Analysis\n\n","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"683bd6","input":"### **Data Cleaning**\n\n","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"bf3b77","input":"### Model fitting\n\n","pos":34,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c7b61a","input":"### Load Dataset\n\n","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f699ca","input":"### Import Packages\n\n","pos":0,"state":"done","type":"cell"}
{"end":1655415693353,"exec_count":136,"id":"e62e4e","input":"# svm with standard scaler\n# https://www.geeksforgeeks.org/svm-hyperparameter-tuning-using-gridsearchcv-ml/\n\n\npipeline =Pipeline(steps = [(\"scaler\", StandardScaler()), ('svm', SVC(probability = True))])\n\n\nprint(pipeline)\n\ngrid_params_svm2 = {'svm__C': [0.1, 1, 10, 100, 1000],\n              'svm__gamma': [1, 0.1, 0.01, 0.001, 0.0001, 'auto'],\n              'svm__kernel': ['rbf','poly','linear','sigmoid']}\n\ngs_svm2 = GridSearchCV(estimator = pipeline,\n                           param_grid = grid_params_svm2,\n                           cv = 5,\n                           verbose=0)\n\ngs_svm_res2 = gs_svm2.fit(x_train, y_train)\nprint(gs_svm_res2.best_params_)","kernel":"elastic-searchers","output":{"0":{"name":"stdout","text":"Pipeline(steps=[('scaler', StandardScaler()), ('svm', SVC(probability=True))])\n"},"1":{"name":"stdout","text":"{'svm__C': 0.1, 'svm__gamma': 1, 'svm__kernel': 'linear'}\n"}},"pos":53,"start":1655415663099,"state":"done","type":"cell"}
{"id":"960c61","input":"","pos":54.5,"type":"cell"}
{"id":"bb21df","input":"","pos":55,"type":"cell"}
{"id":0,"time":1655410343059,"type":"user"}
{"last_load":1655409703208,"type":"file"}