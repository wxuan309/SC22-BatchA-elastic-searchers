{"backend_state":"running","connection_file":"/projects/013ca607-9af4-4b8b-9eb4-c9fa83e65e2d/.local/share/jupyter/runtime/kernel-0775e3c9-b379-4f82-a62b-4098c0ffd591.json","kernel":"elastic-searchers","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.12"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1655833685013,"exec_count":1,"id":"58ef44","input":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics\nimport plotly.express as px\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\nimport sys, os","kernel":"elastic-searchers","no_halt":true,"pos":1,"start":1655833682623,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833685037,"exec_count":2,"id":"b6bdd6","input":"#Original scientific paper concluded that 'Age', ‘Family_diabetes’, ‘Physically active’, ‘Regular Medicine’ and ‘Pdiabetes’ were the most important factors and prove useful to predicting whether or not someone has diabetes. They used a ratio of 75:25.","kernel":"elastic-searchers","no_halt":true,"pos":3,"start":1655833685028,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833685055,"exec_count":3,"id":"d5c7e5","input":"diabetes = pd.read_csv(\"./Data/diabetes_dataset__2019.csv\")","kernel":"elastic-searchers","no_halt":true,"pos":4,"start":1655833685049,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833685111,"exec_count":4,"id":"5a9fd4","input":"diabetes.head()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Family_Diabetes</th>\n      <th>highBP</th>\n      <th>PhysicallyActive</th>\n      <th>BMI</th>\n      <th>Smoking</th>\n      <th>Alcohol</th>\n      <th>Sleep</th>\n      <th>SoundSleep</th>\n      <th>RegularMedicine</th>\n      <th>JunkFood</th>\n      <th>Stress</th>\n      <th>BPLevel</th>\n      <th>Pregancies</th>\n      <th>Pdiabetes</th>\n      <th>UriationFreq</th>\n      <th>Diabetic</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>50-59</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>one hr or more</td>\n      <td>39.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>no</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>high</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>50-59</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>less than half an hr</td>\n      <td>28.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>yes</td>\n      <td>very often</td>\n      <td>sometimes</td>\n      <td>normal</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>40-49</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>no</td>\n      <td>one hr or more</td>\n      <td>24.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>6.0</td>\n      <td>6.0</td>\n      <td>no</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>normal</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>50-59</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>no</td>\n      <td>one hr or more</td>\n      <td>23.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>no</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>normal</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>40-49</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>no</td>\n      <td>less than half an hr</td>\n      <td>27.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>8.0</td>\n      <td>8.0</td>\n      <td>no</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>normal</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     Age Gender Family_Diabetes highBP      PhysicallyActive   BMI Smoking  \\\n0  50-59   Male              no    yes        one hr or more  39.0      no   \n1  50-59   Male              no    yes  less than half an hr  28.0      no   \n2  40-49   Male              no     no        one hr or more  24.0      no   \n3  50-59   Male              no     no        one hr or more  23.0      no   \n4  40-49   Male              no     no  less than half an hr  27.0      no   \n\n  Alcohol  Sleep  SoundSleep RegularMedicine      JunkFood     Stress BPLevel  \\\n0      no    8.0         6.0              no  occasionally  sometimes    high   \n1      no    8.0         6.0             yes    very often  sometimes  normal   \n2      no    6.0         6.0              no  occasionally  sometimes  normal   \n3      no    8.0         6.0              no  occasionally  sometimes  normal   \n4      no    8.0         8.0              no  occasionally  sometimes  normal   \n\n   Pregancies Pdiabetes UriationFreq Diabetic  \n0         0.0         0     not much       no  \n1         0.0         0     not much       no  \n2         0.0         0     not much       no  \n3         0.0         0     not much       no  \n4         0.0         0     not much       no  "},"exec_count":4}},"pos":5,"scrolled":true,"start":1655833685068,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833685280,"exec_count":5,"id":"267f6c","input":"diabetes.tail()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Family_Diabetes</th>\n      <th>highBP</th>\n      <th>PhysicallyActive</th>\n      <th>BMI</th>\n      <th>Smoking</th>\n      <th>Alcohol</th>\n      <th>Sleep</th>\n      <th>SoundSleep</th>\n      <th>RegularMedicine</th>\n      <th>JunkFood</th>\n      <th>Stress</th>\n      <th>BPLevel</th>\n      <th>Pregancies</th>\n      <th>Pdiabetes</th>\n      <th>UriationFreq</th>\n      <th>Diabetic</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>948</th>\n      <td>60 or older</td>\n      <td>Male</td>\n      <td>yes</td>\n      <td>yes</td>\n      <td>more than half an hr</td>\n      <td>27.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>yes</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>high</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>quite often</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>949</th>\n      <td>60 or older</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>none</td>\n      <td>23.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>yes</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>high</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>950</th>\n      <td>60 or older</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>less than half an hr</td>\n      <td>27.0</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>yes</td>\n      <td>occasionally</td>\n      <td>very often</td>\n      <td>high</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>951</th>\n      <td>60 or older</td>\n      <td>Female</td>\n      <td>yes</td>\n      <td>yes</td>\n      <td>one hr or more</td>\n      <td>30.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>7.0</td>\n      <td>4.0</td>\n      <td>yes</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>high</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>quite often</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>952</th>\n      <td>$$$$$$</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"             Age  Gender Family_Diabetes highBP      PhysicallyActive   BMI  \\\n948  60 or older    Male             yes    yes  more than half an hr  27.0   \n949  60 or older    Male              no    yes                  none  23.0   \n950  60 or older    Male              no    yes  less than half an hr  27.0   \n951  60 or older  Female             yes    yes        one hr or more  30.0   \n952       $$$$$$     NaN             NaN    NaN                   NaN   NaN   \n\n    Smoking Alcohol  Sleep  SoundSleep RegularMedicine      JunkFood  \\\n948      no      no    6.0         5.0             yes  occasionally   \n949      no      no    6.0         5.0             yes  occasionally   \n950      no     yes    6.0         5.0             yes  occasionally   \n951      no      no    7.0         4.0             yes  occasionally   \n952     NaN     NaN    NaN         NaN             NaN           NaN   \n\n         Stress BPLevel  Pregancies Pdiabetes UriationFreq Diabetic  \n948   sometimes    high         0.0         0  quite often      yes  \n949   sometimes    high         0.0         0     not much       no  \n950  very often    high         0.0         0     not much       no  \n951   sometimes    high         2.0         0  quite often      yes  \n952         NaN     NaN         NaN       NaN          NaN      NaN  "},"exec_count":5}},"pos":6,"scrolled":true,"start":1655833685120,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833685309,"exec_count":6,"id":"0653c0","input":"print(diabetes.columns)\nprint(\"\")\nprint(diabetes.shape)","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"name":"stdout","text":"Index(['Age', 'Gender', 'Family_Diabetes', 'highBP', 'PhysicallyActive', 'BMI',\n       'Smoking', 'Alcohol', 'Sleep', 'SoundSleep', 'RegularMedicine',\n       'JunkFood', 'Stress', 'BPLevel', 'Pregancies', 'Pdiabetes',\n       'UriationFreq', 'Diabetic'],\n      dtype='object')\n\n(953, 18)\n"}},"pos":7,"start":1655833685291,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833685347,"exec_count":7,"id":"91873a","input":"diabetes.info()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 953 entries, 0 to 952\nData columns (total 18 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   Age               953 non-null    object \n 1   Gender            952 non-null    object \n 2   Family_Diabetes   952 non-null    object \n 3   highBP            952 non-null    object \n 4   PhysicallyActive  952 non-null    object \n 5   BMI               948 non-null    float64\n 6   Smoking           952 non-null    object \n 7   Alcohol           952 non-null    object \n 8   Sleep             952 non-null    float64\n 9   SoundSleep        952 non-null    float64\n 10  RegularMedicine   952 non-null    object \n 11  JunkFood          952 non-null    object \n 12  Stress            952 non-null    object \n 13  BPLevel           952 non-null    object \n 14  Pregancies        910 non-null    float64\n 15  Pdiabetes         951 non-null    object \n 16  UriationFreq      952 non-null    object \n 17  Diabetic          951 non-null    object \ndtypes: float64(4), object(14)\nmemory usage: 134.1+ KB\n"}},"pos":8,"start":1655833685327,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833685363,"exec_count":8,"id":"d6b3b1","input":"diabetes.dropna(inplace = True)","kernel":"elastic-searchers","no_halt":true,"pos":9,"start":1655833685353,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833685388,"exec_count":9,"id":"b6c23f","input":"diabetes['Diabetic'] = diabetes['Diabetic'].replace('no', 0)\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace(' no', 0)\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace('yes', 1)\ndiabetes['Diabetic']","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"text/plain":"0      0\n1      0\n2      0\n3      0\n4      0\n      ..\n947    1\n948    1\n949    0\n950    0\n951    1\nName: Diabetic, Length: 905, dtype: int64"},"exec_count":9}},"pos":10,"start":1655833685368,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833686440,"exec_count":10,"id":"4edca4","input":"#Age Gender BMI Diabetic\nimport plotly.express as px\nfig = px.violin(diabetes, x=\"Gender\", y=\"Age\",color=\"Diabetic\",\n            title=\" Age and Gender of Diabetic Patitents\")\n\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"144baee2fb39e97eca02bd0ada96b5894edf2512"}}},"pos":11,"start":1655833685392,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833686589,"exec_count":11,"id":"549e4f","input":"df = diabetes\nfig= px.bar(df, x= \"PhysicallyActive\", color=\"Age\", barmode ='group',  title=\"Age Groups and Physical Activity\")\nfig.show()\nfig.write_html(\"AgeGroups_PhysicalActivity.html\")","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"485e5467fd1357a7c9c67420bf0ecf715b3f2ef9"}}},"pos":13,"start":1655833686447,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833686623,"exec_count":12,"id":"e739a3","input":"#cleaning the data -- dropping missing and duplicate values for sanity\ndiabetes.dropna(inplace = True)\ndiabetes = diabetes.reset_index(drop=True)\n\nlength = len(diabetes.index) #save length of array of later\nlength","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"text/plain":"905"},"exec_count":12}},"pos":15,"start":1655833686614,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833686677,"exec_count":13,"id":"47815f","input":"#converting categorical variables into dummy variables\ncol_category = ['Age','Gender','Family_Diabetes','highBP','PhysicallyActive','Smoking','Alcohol','RegularMedicine',\n                'JunkFood','Stress','BPLevel','Pdiabetes','UriationFreq']\nfor col in col_category:\n    diabetes = pd.concat([diabetes.drop(col, axis=1), pd.get_dummies(diabetes[col], prefix=col, prefix_sep='_')], axis=1)","kernel":"elastic-searchers","no_halt":true,"pos":16,"start":1655833686659,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833686693,"exec_count":14,"id":"bf1fd1","input":"#coverting target variable (yes/no) into 0s and 1s\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace('no', 0)\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace(' no', 0)\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace('yes', 1)\ndiabetes['Diabetic']","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"text/plain":"0      0\n1      0\n2      0\n3      0\n4      0\n      ..\n900    1\n901    1\n902    0\n903    0\n904    1\nName: Diabetic, Length: 905, dtype: int64"},"exec_count":14}},"pos":17,"start":1655833686681,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833687004,"exec_count":15,"id":"87caff","input":"#BMI, age, diabetic\ndf = diabetes\nfig = px.bar(df, x=\"Diabetic\", y=\"BMI\", barmode=\"group\", color = \"Age_60 or older\", title=\"BMI in Diabetics and Non-Diabetics relating to age group\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"4abd7edcc5675ed90b9294457018e9611571da94"}}},"pos":20,"start":1655833686711,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833687228,"exec_count":16,"id":"2d114d","input":"# Stress always and Quality Sleep\ndf = diabetes\nfig = px.violin(df, x=\"Stress_always\", y=\"SoundSleep\", color= \"Diabetic\", title=\"Quality sleep in relation to stress\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"b0ebbe9d50e5cc201d61fed3d013faecd213e9ac"}}},"pos":21,"start":1655833687023,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833687319,"exec_count":17,"id":"9a51ee","input":"# Stress always and Quality Sleep\ndf = diabetes\nfig = px.violin(df, x=\"Stress_not at all\", y=\"SoundSleep\", color= \"Diabetic\", title=\"Quality sleep in relation to stress\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"33364d800e9c4506141c8420179065e8e38f6b0e"}}},"pos":22,"start":1655833687241,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833687428,"exec_count":18,"id":"72d4e4","input":"# Blood Pressure and Alcohol\ndf = diabetes\nfig = px.bar(df, x=\"Alcohol_yes\", y=\"BPLevel_high\", color=\"BPLevel_high\") \nfig.update_layout(\n    title=\"Alcohol and blood pressure\",)\n\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"743fb430e06727e333548ac628cd11a4342e26e1"}}},"pos":23,"start":1655833687338,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833687527,"exec_count":19,"id":"d3a58e","input":"# BMI and Gender\ndf= diabetes\nfig = px.violin(df, x=\"Gender_Female\", y=\"BMI\", color=\"Gender_Female\")\n\nfig.update_layout(\n    title=\"BMI of Females\",)\n\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"79ded610d2788b7ec5a1b68e6948b4a876d8b246"}}},"pos":24,"start":1655833687442,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833687638,"exec_count":20,"id":"dc63a9","input":"# BMI and Gender\ndf= diabetes\nfig = px.violin(df, x=\"Gender_Male\", y=\"BMI\", color=\"Gender_Male\")\n\nfig.update_layout(\n    title=\"BMI of Males\",)\n\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"4e9f0f453f745bfa905624c315123355dc77155a"}}},"pos":25,"start":1655833687541,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833687779,"exec_count":21,"id":"52ec3a","input":"df = diabetes\nfig = px.bar(df, x=\"Diabetic\", y=\"BMI\", barmode='group', color = \"Diabetic\", height=400, title='BMI of diabetics compared to non-diabetics')\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"1d99aa85e889a214dbc86948f2965b4dc1dd4477"}}},"pos":27,"start":1655833687652,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833687961,"exec_count":22,"id":"38c437","input":"#BMI, age, diabetic\nfig = px.bar(df, x=\"Stress_not at all\", y=\"Age_60 or older\", color = \"Age_60 or older\", \n             title=\"\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"35fe426464f13b0aee9d8efa184e7da87aa9cc6c"}}},"pos":28,"start":1655833687804,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833688242,"exec_count":23,"id":"d5a7db","input":"#BMI, age, diabetic\nfig = px.bar(df, x=\"Stress_always\", y=\"Gender_Female\", barmode=\"group\", color = \"Age_60 or older\", title=\"BMI in Diabetics and Non-Diabetics relating to age group\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"0f36ff1506a5cf5760a8c2df56f5c67eace65627"}}},"pos":29,"start":1655833687995,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833688346,"exec_count":24,"id":"afe916","input":"\nfig = px.bar(df, x=\"Diabetic\", y=\"Stress_always\", barmode=\"group\", color = \"Age_60 or older\", title=\"BMI in Diabetics and Non-Diabetics relating to age group\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"cc07e8f8317813d217459fcf8852e16efd336e5e"}}},"pos":30,"start":1655833688259,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833690522,"exec_count":26,"id":"397795","input":"#Age and Physical Activity\nfig = px.violin(df, x= \"PhysicallyActive_one hr or more\", y=\"Age_60 or older\", color=\"Diabetic\", title = 'Physical Activity Relating to Age in Diabetic and Non Diabetic People')\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"7ff965aa2aceb4e833a1b1200c5534ded3efa5c0"}}},"pos":32,"start":1655833690445,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833690602,"exec_count":27,"id":"febf4f","input":"#Age and Physical Activity\nfig = px.violin(df, x= \"PhysicallyActive_none\", y=\"Age_60 or older\", color=\"Diabetic\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"8b0663d70c5c42f079d28c1f6ba189cec8771263"}}},"pos":33,"start":1655833690535,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833690714,"exec_count":28,"id":"60ed72","input":"#Blood Pressure and Physical Activity in older people\nfig = px.violin(df, x= \"PhysicallyActive_less than half an hr\", y=\"BPLevel_high\", color=\"Age_60 or older\",\n               title='Physical Activity affect Blood Pressure in older people')\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"5125ece98e4d6c785bbf7ca9cff0441dd11c8680"}}},"pos":34,"start":1655833690616,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833690815,"exec_count":29,"id":"ac31a1","input":"#BMI, age, diabetic\nfig = px.bar(df, x=\"Stress_always\", y=\"Smoking_yes\", barmode=\"group\", color = \"Stress_always\", title=\"Does Smoking affect Stress levels?\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"4286c65886beabecc51894195c608f9fce5c323c"}}},"pos":35,"start":1655833690720,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833690991,"exec_count":30,"id":"bc7687","input":"#Family_diabetes Pdiabetes \nfig = px.bar(df, x= \"Family_Diabetes_yes\", y=\"Pdiabetes_yes\", barmode = 'group', color=\"Diabetic\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"eb291669b7ca3148bc7b665cf8298303ef99aae6"}}},"pos":36,"start":1655833690834,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833691127,"exec_count":31,"id":"fcb44a","input":"#Family_diabetes Pdiabetes \nfig= px.violin(df, x= \"RegularMedicine_yes\", y=\"Age_60 or older\", color=\"Diabetic\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"b1eebfed47fe6f010f459d153771d856864dafd4"}}},"pos":37,"start":1655833691058,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833691216,"exec_count":32,"id":"d2898c","input":"df = diabetes\nfig = px.bar(df, x=\"Stress_very often\", y=\"SoundSleep\", barmode=\"group\", color = \"SoundSleep\", title=\" Sleep Concived Affecting Stress\")\nfig.show()","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"iframe":"a2a29e236b49f761af8873aeaf4edc22a95af1e6"}}},"pos":38,"start":1655833691150,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833691230,"exec_count":33,"id":"489269","input":"def conf_matrix(y, y_pred):\n    fig, ax =plt.subplots(figsize=(3,3))\n    labels=['No','Yes']\n    ax=sns.heatmap(confusion_matrix(y, y_pred), annot=True, cmap=\"Blues\", fmt='g', cbar=False)\n    ax.set_xlabel('\\nPredicted Values')\n    ax.set_ylabel('Actual Values')\n    plt.title('Pass or fail')\n    ax.xaxis.set_ticklabels(labels); ax.yaxis.set_ticklabels(labels);\n\ndef get_scores(y, y_pred, y_prob):\n    data={'Accuracy': np.round(accuracy_score(y, y_pred),3),\n    'Precision':np.round(precision_score(y, y_pred),3),\n    'Recall':np.round(recall_score(y, y_pred),3),\n    'F1':np.round(f1_score(y, y_pred),3),\n    'ROC AUC':np.round(roc_auc_score(y, y_prob),3)}\n    scores_df = pd.Series(data).to_frame('scores')\n    return scores_df","kernel":"elastic-searchers","no_halt":true,"pos":40,"start":1655833691225,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833691246,"exec_count":34,"id":"c17ece","input":"X = diabetes[\"BMI\"].to_numpy().reshape(-1, 1)\ny = diabetes[\"Diabetic\"].to_numpy().reshape(-1, 1)","kernel":"elastic-searchers","no_halt":true,"pos":41,"start":1655833691243,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833691308,"exec_count":36,"id":"91eb84","input":"#split data into training and testing\ntrain, test = train_test_split(diabetes, test_size = 0.25, shuffle = True)","kernel":"elastic-searchers","no_halt":true,"pos":45,"start":1655833691295,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833691324,"exec_count":37,"id":"8d1966","input":"xcols = train.columns\nx_train = train[xcols]\nx_test = test[xcols]\ny_train = train['Diabetic']\ny_test = test['Diabetic']","kernel":"elastic-searchers","no_halt":true,"pos":46,"start":1655833691317,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833693636,"exec_count":42,"id":"8255d7","input":"# hyperparameter tuning","kernel":"elastic-searchers","no_halt":true,"pos":51,"start":1655833693629,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833693978,"exec_count":44,"id":"25bdc6","input":"# term 2 LOGISTIC REGRESSION\nconf_matrix(y_test, y_pred_reg) \nget_scores(y_test, y_pred_reg, y_prob_reg[:, 1])\nacc_reg = accuracy_score(y_test, y_pred_reg)\nf1_reg = f1_score(y_test, y_pred_reg)","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"image/png":"8096212606e9cd58eb09944fefca6bcb1dbf0f8c","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":54,"start":1655833693836,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833712423,"id":"63d4bb","input":"# logistic regression\n# dictionary = {key:value}\n# parameters = {parameter: []}\n# https://stackoverflow.com/questions/19018333/gridsearchcv-on-logisticregression-in-scikit-learn\n\ngrid_params_reg = {'penalty':['l2'],\n                   'C':[1, 10, 100, 1000]}\n\ngs_reg = GridSearchCV(estimator = LogisticRegression(max_iter=500),\n                           param_grid = grid_params_reg,\n                           cv = 5,\n                           verbose=0)\ngs_reg_res = gs_reg.fit(x_train, y_train)\n\n\nprint(gs_reg_res.best_params_)","kernel":"elastic-searchers","no_halt":true,"pos":56,"scrolled":true,"start":1655833712423,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833712433,"id":"15f99e","input":"# svm\n# https://www.geeksforgeeks.org/svm-hyperparameter-tuning-using-gridsearchcv-ml/\n# fitting the model for grid search\n\n\n# define parameter\ngrid_params_svm = {'C': [0.1, 1, 10, 100, 1000],\n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001, 'auto'],\n              'kernel': ['rbf','poly','linear','sigmoid']}\n\n\n# call grid search function, specify which model you want to use + parameter\n# save the whole thing into a variable\ngs_svm = GridSearchCV(estimator = svm.SVC(probability=True),\n                      param_grid = grid_params_svm,\n                      cv = 5,\n                      verbose=0)\n\n\n# fit the model\ngs_svm_res = gs_svm.fit(x_train, y_train)\nprint(gs_svm_res.best_params_)","kernel":"elastic-searchers","no_halt":true,"pos":57,"start":1655833712433,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833712434,"id":"e62e4e","input":"# svm with standard scaler\n# https://www.geeksforgeeks.org/svm-hyperparameter-tuning-using-gridsearchcv-ml/\n\n\npipeline =Pipeline(steps = [(\"scaler\", StandardScaler()), ('svm', SVC(probability = True))])\n\n\nprint(pipeline)\n\ngrid_params_svm2 = {'svm__C': [0.1, 1, 10, 100, 1000],\n              'svm__gamma': [1, 0.1, 0.01, 0.001, 0.0001, 'auto'],\n              'svm__kernel': ['rbf','poly','linear','sigmoid']}\n\ngs_svm2 = GridSearchCV(estimator = pipeline,\n                           param_grid = grid_params_svm2,\n                           cv = 5,\n                           verbose=0)\n\ngs_svm_res2 = gs_svm2.fit(x_train, y_train)\nprint(gs_svm_res2.best_params_)","kernel":"elastic-searchers","no_halt":true,"pos":58,"start":1655833712434,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833958729,"exec_count":46,"id":"7f19c6","input":"# random forest\n\n# define parameter\ngrid_params_rfc = {'criterion' :['gini'],\n                   'bootstrap': [True, False],\n                   'max_depth': [4,5,6,7,8, None],\n                   'max_features': ['sqrt'],\n                   'min_samples_leaf': [1, 2, 4],\n                   'min_samples_split': [2, 5, 10],\n                   'n_estimators': [5, 10, 50, 100]}\n\n# call grid search function, specify which model you want to use + parameter\n# save the whole thing into a variable\ngs_rfc = GridSearchCV(estimator=RandomForestClassifier(), param_grid=grid_params_rfc, cv= 5)\n\n\n# fit/train the model\ngs_rfc_res = gs_rfc.fit(x_train, y_train)\n\n\n# print the calculated best parameters\nprint(gs_rfc_res.best_params_)","kernel":"elastic-searchers","output":{"0":{"name":"stdout","text":"{'bootstrap': True, 'criterion': 'gini', 'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 100}\n"}},"pos":55,"start":1655833780311,"state":"done","type":"cell"}
{"cell_type":"code","end":1655833958929,"exec_count":47,"id":"f84403","input":"#BMI, age, diabetic\nfig = px.bar(df, x=\"JunkFood\", y=\"Age\", barmode=\"group\", color = \"Diabetic\",\n             title=\"Determining if Junkfood affects Diabetic People\")\nfig.show()","kernel":"elastic-searchers","output":{"0":{"ename":"ValueError","evalue":"Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['BMI', 'Sleep', 'SoundSleep', 'Pregancies', 'Diabetic', 'Age_40-49', 'Age_50-59', 'Age_60 or older', 'Age_less than 40', 'Gender_Female', 'Gender_Male', 'Family_Diabetes_no', 'Family_Diabetes_yes', 'highBP_no', 'highBP_yes', 'PhysicallyActive_less than half an hr', 'PhysicallyActive_more than half an hr', 'PhysicallyActive_none', 'PhysicallyActive_one hr or more', 'Smoking_no', 'Smoking_yes', 'Alcohol_no', 'Alcohol_yes', 'RegularMedicine_no', 'RegularMedicine_o', 'RegularMedicine_yes', 'JunkFood_always', 'JunkFood_occasionally', 'JunkFood_often', 'JunkFood_very often', 'Stress_always', 'Stress_not at all', 'Stress_sometimes', 'Stress_very often', 'BPLevel_High', 'BPLevel_Low', 'BPLevel_high', 'BPLevel_low', 'BPLevel_normal', 'BPLevel_normal ', 'Pdiabetes_0', 'Pdiabetes_yes', 'UriationFreq_not much', 'UriationFreq_quite often'] but received: JunkFood","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [47]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m#BMI, age, diabetic\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m fig \u001b[38;5;241m=\u001b[39m \u001b[43mpx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbar\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mJunkFood\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mAge\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbarmode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mgroup\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolor\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mDiabetic\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[43m             \u001b[49m\u001b[43mtitle\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mDetermining if Junkfood affects Diabetic People\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      4\u001b[0m fig\u001b[38;5;241m.\u001b[39mshow()\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/plotly/express/_chart_types.py:373\u001b[0m, in \u001b[0;36mbar\u001b[0;34m(data_frame, x, y, color, pattern_shape, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, hover_name, hover_data, custom_data, text, base, error_x, error_x_minus, error_y, error_y_minus, animation_frame, animation_group, category_orders, labels, color_discrete_sequence, color_discrete_map, color_continuous_scale, pattern_shape_sequence, pattern_shape_map, range_color, color_continuous_midpoint, opacity, orientation, barmode, log_x, log_y, range_x, range_y, text_auto, title, template, width, height)\u001b[0m\n\u001b[1;32m    325\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mbar\u001b[39m(\n\u001b[1;32m    326\u001b[0m     data_frame\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    327\u001b[0m     x\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    367\u001b[0m     height\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    368\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m go\u001b[38;5;241m.\u001b[39mFigure:\n\u001b[1;32m    369\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    370\u001b[0m \u001b[38;5;124;03m    In a bar plot, each row of `data_frame` is represented as a rectangular\u001b[39;00m\n\u001b[1;32m    371\u001b[0m \u001b[38;5;124;03m    mark.\u001b[39;00m\n\u001b[1;32m    372\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 373\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mmake_figure\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    374\u001b[0m \u001b[43m        \u001b[49m\u001b[43margs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlocals\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    375\u001b[0m \u001b[43m        \u001b[49m\u001b[43mconstructor\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgo\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mBar\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    376\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtrace_patch\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mdict\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mtextposition\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mauto\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    377\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlayout_patch\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mdict\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mbarmode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbarmode\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    378\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/plotly/express/_core.py:1948\u001b[0m, in \u001b[0;36mmake_figure\u001b[0;34m(args, constructor, trace_patch, layout_patch)\u001b[0m\n\u001b[1;32m   1945\u001b[0m layout_patch \u001b[38;5;241m=\u001b[39m layout_patch \u001b[38;5;129;01mor\u001b[39;00m {}\n\u001b[1;32m   1946\u001b[0m apply_default_cascade(args)\n\u001b[0;32m-> 1948\u001b[0m args \u001b[38;5;241m=\u001b[39m \u001b[43mbuild_dataframe\u001b[49m\u001b[43m(\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconstructor\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1949\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m constructor \u001b[38;5;129;01min\u001b[39;00m [go\u001b[38;5;241m.\u001b[39mTreemap, go\u001b[38;5;241m.\u001b[39mSunburst, go\u001b[38;5;241m.\u001b[39mIcicle] \u001b[38;5;129;01mand\u001b[39;00m args[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpath\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   1950\u001b[0m     args \u001b[38;5;241m=\u001b[39m process_dataframe_hierarchy(args)\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/plotly/express/_core.py:1405\u001b[0m, in \u001b[0;36mbuild_dataframe\u001b[0;34m(args, constructor)\u001b[0m\n\u001b[1;32m   1402\u001b[0m     args[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcolor\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1403\u001b[0m \u001b[38;5;66;03m# now that things have been prepped, we do the systematic rewriting of `args`\u001b[39;00m\n\u001b[0;32m-> 1405\u001b[0m df_output, wide_id_vars \u001b[38;5;241m=\u001b[39m \u001b[43mprocess_args_into_dataframe\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1406\u001b[0m \u001b[43m    \u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mwide_mode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvar_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalue_name\u001b[49m\n\u001b[1;32m   1407\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1409\u001b[0m \u001b[38;5;66;03m# now that `df_output` exists and `args` contains only references, we complete\u001b[39;00m\n\u001b[1;32m   1410\u001b[0m \u001b[38;5;66;03m# the special-case and wide-mode handling by further rewriting args and/or mutating\u001b[39;00m\n\u001b[1;32m   1411\u001b[0m \u001b[38;5;66;03m# df_output\u001b[39;00m\n\u001b[1;32m   1413\u001b[0m count_name \u001b[38;5;241m=\u001b[39m _escape_col_name(df_output, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcount\u001b[39m\u001b[38;5;124m\"\u001b[39m, [var_name, value_name])\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/plotly/express/_core.py:1207\u001b[0m, in \u001b[0;36mprocess_args_into_dataframe\u001b[0;34m(args, wide_mode, var_name, value_name)\u001b[0m\n\u001b[1;32m   1205\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m argument \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mindex\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m   1206\u001b[0m             err_msg \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m To use the index, pass it in directly as `df.index`.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m-> 1207\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(err_msg)\n\u001b[1;32m   1208\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m length \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(df_input[argument]) \u001b[38;5;241m!=\u001b[39m length:\n\u001b[1;32m   1209\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m   1210\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAll arguments should have the same length. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1211\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThe length of column argument `df[\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m]` is \u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[38;5;124m, whereas the \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1218\u001b[0m         )\n\u001b[1;32m   1219\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['BMI', 'Sleep', 'SoundSleep', 'Pregancies', 'Diabetic', 'Age_40-49', 'Age_50-59', 'Age_60 or older', 'Age_less than 40', 'Gender_Female', 'Gender_Male', 'Family_Diabetes_no', 'Family_Diabetes_yes', 'highBP_no', 'highBP_yes', 'PhysicallyActive_less than half an hr', 'PhysicallyActive_more than half an hr', 'PhysicallyActive_none', 'PhysicallyActive_one hr or more', 'Smoking_no', 'Smoking_yes', 'Alcohol_no', 'Alcohol_yes', 'RegularMedicine_no', 'RegularMedicine_o', 'RegularMedicine_yes', 'JunkFood_always', 'JunkFood_occasionally', 'JunkFood_often', 'JunkFood_very often', 'Stress_always', 'Stress_not at all', 'Stress_sometimes', 'Stress_very often', 'BPLevel_High', 'BPLevel_Low', 'BPLevel_high', 'BPLevel_low', 'BPLevel_normal', 'BPLevel_normal ', 'Pdiabetes_0', 'Pdiabetes_yes', 'UriationFreq_not much', 'UriationFreq_quite often'] but received: JunkFood"]}},"pos":31,"start":1655833958754,"state":"done","type":"cell"}
{"cell_type":"code","end":1655834791477,"exec_count":52,"id":"56555d","input":"#LOGISTIC REGRESSION\nfrom sklearn.linear_model import LogisticRegression\nreg = LogisticRegression(max_iter = 500, C = 1, penalty='l2')\nreg.fit(x_train, y_train)\ny_pred_reg = reg.predict(x_test)\ny_prob_reg = reg.predict_proba(x_test)\nconf_matrix(y_test, y_pred_reg)\nget_scores(y_test, y_pred_reg, y_prob_reg[:, 1])\n\nacc_reg = accuracy_score(y_test, y_pred_reg)\nf1_reg = f1_score(y_test, y_pred_reg)","kernel":"elastic-searchers","output":{"0":{"data":{"image/png":"8096212606e9cd58eb09944fefca6bcb1dbf0f8c","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":49,"start":1655834790257,"state":"done","type":"cell"}
{"cell_type":"code","end":1655834896646,"exec_count":58,"id":"701b43","input":"#SVM WITH STANDARD SCALER\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n#'svm__C': 0.1, 'svm__gamma': 1, 'svm__kernel': 'linear'\nclf2 = Pipeline(steps = [(\"scaler\", StandardScaler()), ('svm', SVC(kernel = 'linear', gamma='auto',  C = 0.1, probability = True))])\nclf2.fit(x_train, y_train)\ny_pred_clf2 = clf2.predict(x_test)\ny_prob_clf2 = clf2.predict_proba(x_test)\nconf_matrix(y_test, y_pred_clf2)\nget_scores(y_test, y_pred_clf2, y_prob_clf2[:, 1])\n\nacc_svm2 = accuracy_score(y_test, y_pred_clf2)\nf1_svm2 = f1_score(y_test, y_pred_clf2)","kernel":"elastic-searchers","output":{"0":{"data":{"image/png":"8096212606e9cd58eb09944fefca6bcb1dbf0f8c","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":48,"start":1655834896424,"state":"done","type":"cell"}
{"cell_type":"code","end":1655835538433,"exec_count":63,"id":"bb21df","input":"# save accuracy and f1 score of each model into a list\naccuracy = [acc_reg, acc_rfc, acc_svm, acc_svm2]\nf1 = [f1_reg, f1_rfc, f1_svm, f1_svm2]\nmodel = ['logistic regression', 'random forest', 'svm', 'svm with standard scalar']\n\n\n# plot accuracy\nfig = px.bar(x = model, y = accuracy, title = 'The Accuracy Score of Each Model')\nfig.update_xaxes(title_text = \"Models\")\nfig.update_yaxes(title_text = \"Accuracy\")\nfig.show()\n# fig.write_html(\"Accuracy and f1 scores\")\n\n\n# plot f1 score\nfig = px.bar(x = model, y = f1, title = 'The F1 Score of Each Model')\nfig.update_xaxes(title_text = \"Models\")\nfig.update_yaxes(title_text = \"F1 Scores\")\nfig.show()\n# fig.write_html(\"Accuracy and f1 scores\")","kernel":"elastic-searchers","output":{"0":{"data":{"iframe":"c715a6114ac1c3251d7f9ef3b6664129217f81cf"}},"1":{"data":{"iframe":"fa2d6d94e7c4419d1ec0161b05a017bf51ffed2f"}}},"pos":60,"start":1655835538301,"state":"done","type":"cell"}
{"cell_type":"code","end":1655835578194,"exec_count":65,"id":"cc7811","input":"#RANDOM FORESTS\nfrom sklearn.ensemble import RandomForestClassifier\n\n# save selected model + tuned hyperparameters inside variable\nrfc = RandomForestClassifier(bootstrap = True, criterion= 'gini', min_samples_split = 2, min_samples_leaf = 1, max_depth= 5, max_features='sqrt', n_estimators=100)\n\n# fit/train model using training datasets (x_train: features; y_train: target variable)\nrfc.fit(x_train, y_train)\n\n# predict result\ny_pred_rfc = rfc.predict(x_test)\ny_prob_rfc = rfc.predict_proba(x_test)\nconf_matrix(y_test, y_pred_rfc)\nget_scores(y_test, y_pred_rfc, y_prob_rfc[:, 1])\n\nacc_rfc = accuracy_score(y_test, y_pred_rfc)\nf1_rfc = f1_score(y_test, y_pred_rfc)","kernel":"elastic-searchers","output":{"0":{"data":{"image/png":"8096212606e9cd58eb09944fefca6bcb1dbf0f8c","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":50,"start":1655835577806,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":43,"id":"85995d","input":"# term 1 RANDOM FOREST\nconf_matrix(y_test, y_pred_rfc)\nget_scores(y_test, y_pred_rfc, y_prob_rfc[:, 1])\nacc_rfc = accuracy_score(y_test, y_pred_rfc)\nf1_rfc = f1_score(y_test, y_pred_rfc)\n\nacc_reg = accuracy_score(y_test, y_pred_reg)\nf1_reg = f1_score(y_test, y_pred_reg)","kernel":"elastic-searchers","no_halt":true,"output":{"0":{"data":{"image/png":"97f4586bf18b2a420ca421c8b1ad9fb545c24f05","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":53,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":57,"id":"9d7108","input":"#SVMS\nfrom sklearn import svm\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n\nclf = svm.SVC(C= 0.1, gamma= 1, kernel= 'poly', probability= True)\nclf.fit(x_train,y_train)\ny_pred_clf = clf.predict(x_test)\ny_prob_clf = clf.predict_proba(x_test)\n\nconf_matrix(y_test, y_pred_clf)\nget_scores(y_test, y_pred_clf, y_prob_clf[:, 1])\n\nacc_svm = accuracy_score(y_test, y_pred_clf)\nf1_svm = f1_score(y_test, y_pred_clf)","kernel":"elastic-searchers","output":{"0":{"data":{"image/png":"8096212606e9cd58eb09944fefca6bcb1dbf0f8c","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":47,"state":"done","type":"cell"}
{"cell_type":"code","id":"089efe","input":"","pos":52,"type":"cell"}
{"cell_type":"code","id":"14ad6b","input":"","pos":19,"type":"cell"}
{"cell_type":"code","id":"5ad7f9","input":"","pos":12,"type":"cell"}
{"cell_type":"code","id":"7abd4f","input":"","pos":43,"type":"cell"}
{"cell_type":"code","id":"7edf91","input":"","pos":42,"type":"cell"}
{"cell_type":"code","id":"89c8b4","input":"","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"52caef","input":"### Exploratory Data Analysis\n\n","pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"683bd6","input":"### **Data Cleaning**\n\n","pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"960c61","input":"graphs","pos":59,"type":"cell"}
{"cell_type":"markdown","id":"bf3b77","input":"### Model fitting\n\n","pos":39,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c7b61a","input":"### Load Dataset\n\n","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f699ca","input":"### Import Packages\n\n","pos":0,"state":"done","type":"cell"}
{"end":1655835734985,"exec_count":73,"id":"676d89","input":"# save accuracy and f1 score of each model into a list\naccuracy = [acc_reg, acc_rfc, acc_svm, acc_svm2]\nf1 = [f1_reg, f1_rfc, f1_svm, f1_svm2]\nmodel = ['logistic regression', 'random forest', 'svm', 'svm with standard scalar']\n\n\n# plot accuracy\nfig = px.line(x = model, y = accuracy, title = 'The Accuracy Score of Each Model')\nfig.update_xaxes(title_text = \"Models\")\nfig.update_yaxes(range = [0,1.1], title_text = \"Accuracy\")\nfig.show()\n# fig.write_html(\"Accuracy and f1 scores\")\n\n\n# plot f1 score\nfig = px.line(x = model, y = f1, title = 'The F1 Score of Each Model')\nfig.update_xaxes(title_text = \"Models\")\nfig.update_yaxes(range = [0,1.1], title_text = \"F1 Scores\")\nfig.show()\n# fig.write_html(\"Accuracy and f1 scores\")","kernel":"elastic-searchers","output":{"0":{"data":{"iframe":"09b06b8272b08f517788a439f4b5decee4b8b179"}},"1":{"data":{"iframe":"9cbb3c3b82adb5ebae1086411f8da43d49ea567e"}}},"pos":59.5,"start":1655835734798,"state":"done","type":"cell"}
{"exec_count":72,"id":"57bc9b","input":"# save accuracy and f1 score of each model into a list\naccuracy = [acc_reg, acc_rfc, acc_svm, acc_svm2]\nf1 = [f1_reg, f1_rfc, f1_svm, f1_svm2]\nmodel = ['logistic regression', 'random forest', 'svm', 'svm with standard scalar']\n\n\n# plot accuracy\nfig = px.scatter(x = model, y = accuracy, title = 'The Accuracy Score of Each Model')\nfig.update_xaxes(title_text = \"Models\")\nfig.update_yaxes(range = [0,1.1], title_text = \"Accuracy\")\nfig.show()\n# fig.write_html(\"Accuracy and f1 scores\")\n\n\n# plot f1 score\nfig = px.scatter(x = model, y = f1, title = 'The F1 Score of Each Model')\nfig.update_xaxes(title_text = \"Models\")\nfig.update_yaxes(range = [0,1.1], title_text = \"F1 Scores\")\nfig.show()\n# fig.write_html(\"Accuracy and f1 scores\")","kernel":"elastic-searchers","output":{"0":{"data":{"iframe":"03352d5ef65f2b27dd03fc380b8575ee21b5c8b2"}},"1":{"data":{"iframe":"2c78c92d8755053adf6d3d5d1eb8c8ef0b77467d"}}},"pos":61,"state":"done","type":"cell"}
{"id":"a1d8ec","input":"","kernel":"elastic-searchers","pos":46.5,"type":"cell"}
{"id":"f9449c","input":"","pos":63,"type":"cell"}
{"id":0,"time":1655844106549,"type":"user"}
{"last_load":1655831125537,"type":"file"}