{"backend_state":"init","connection_file":"/projects/013ca607-9af4-4b8b-9eb4-c9fa83e65e2d/.local/share/jupyter/runtime/kernel-5fbce178-a544-45bd-abc2-84bfe87517ad.json","kernel":"elastic-searchers","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.12"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"089efe","input":"","pos":52,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"14ad6b","input":"","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"15f99e","input":"# svm\n# https://www.geeksforgeeks.org/svm-hyperparameter-tuning-using-gridsearchcv-ml/\n# fitting the model for grid search\n\n\n# define parameter\ngrid_params_svm = {'C': [0.1, 1, 10, 100, 1000],\n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001, 'auto'],\n              'kernel': ['rbf','poly','linear','sigmoid']}\n\n\n# call grid search function, specify which model you want to use + parameter\n# save the whole thing into a variable\ngs_svm = GridSearchCV(estimator = svm.SVC(probability=True),\n                      param_grid = grid_params_svm,\n                      cv = 5,\n                      verbose=0)\n\n\n# fit the model\ngs_svm_res = gs_svm.fit(x_train, y_train)\nprint(gs_svm_res.best_params_)","pos":57,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7abd4f","input":"","pos":43,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7edf91","input":"","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"89c8b4","input":"","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"960c61","input":"","pos":59,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"bb21df","input":"","pos":60,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e62e4e","input":"# svm with standard scaler\n# https://www.geeksforgeeks.org/svm-hyperparameter-tuning-using-gridsearchcv-ml/\n\n\npipeline =Pipeline(steps = [(\"scaler\", StandardScaler()), ('svm', SVC(probability = True))])\n\n\nprint(pipeline)\n\ngrid_params_svm2 = {'svm__C': [0.1, 1, 10, 100, 1000],\n              'svm__gamma': [1, 0.1, 0.01, 0.001, 0.0001, 'auto'],\n              'svm__kernel': ['rbf','poly','linear','sigmoid']}\n\ngs_svm2 = GridSearchCV(estimator = pipeline,\n                           param_grid = grid_params_svm2,\n                           cv = 5,\n                           verbose=0)\n\ngs_svm_res2 = gs_svm2.fit(x_train, y_train)\nprint(gs_svm_res2.best_params_)","pos":58,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"91873a","input":"diabetes.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 953 entries, 0 to 952\nData columns (total 18 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   Age               953 non-null    object \n 1   Gender            952 non-null    object \n 2   Family_Diabetes   952 non-null    object \n 3   highBP            952 non-null    object \n 4   PhysicallyActive  952 non-null    object \n 5   BMI               948 non-null    float64\n 6   Smoking           952 non-null    object \n 7   Alcohol           952 non-null    object \n 8   Sleep             952 non-null    float64\n 9   SoundSleep        952 non-null    float64\n 10  RegularMedicine   952 non-null    object \n 11  JunkFood          952 non-null    object \n 12  Stress            952 non-null    object \n 13  BPLevel           952 non-null    object \n 14  Pregancies        910 non-null    float64\n 15  Pdiabetes         951 non-null    object \n 16  UriationFreq      952 non-null    object \n 17  Diabetic          951 non-null    object \ndtypes: float64(4), object(14)\nmemory usage: 134.1+ KB\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"91eb84","input":"#split data into training and testing\ntrain, test = train_test_split(diabetes, test_size = 0.25, shuffle = True)","pos":45,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"87caff","input":"#BMI, age, diabetic\ndf = diabetes\nfig = px.bar(df, x=\"Diabetic\", y=\"BMI\", barmode=\"group\", color = \"Age_60 or older\", title=\"BMI in Diabetics and Non-Diabetics relating to age group\")\nfig.show()","output":{"0":{"data":{"iframe":"10d6fdf0bd858ec2115be4720502c8a8d00cf52c"},"exec_count":12,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"8d1966","input":"xcols = train.columns\nx_train = train[xcols]\nx_test = test[xcols]\ny_train = train['Diabetic']\ny_test = test['Diabetic']","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"2d114d","input":"# Stress always and Quality Sleep\ndf = diabetes\nfig = px.violin(df, x=\"Stress_always\", y=\"SoundSleep\", color= \"Diabetic\", title=\"Quality sleep in relation to stress\")\nfig.show()","output":{"0":{"data":{"iframe":"6f6c54785d318368378fe30da26a883e0baf3814"},"exec_count":13,"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"9d7108","input":"#SVMS\nfrom sklearn import svm\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n\nclf = svm.SVC(C= 0.1, gamma= 1, kernel= 'poly', probability= True)\nclf.fit(x_train,y_train)\ny_pred_clf = clf.predict(x_test)\ny_prob_clf = clf.predict_proba(x_test)\n\nconf_matrix(y_test, y_pred_clf)\nget_scores(y_test, y_pred_clf, y_prob_clf[:, 1])","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>scores</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Accuracy</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Precision</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Recall</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>F1</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>ROC AUC</th>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"           scores\nAccuracy      1.0\nPrecision     1.0\nRecall        1.0\nF1            1.0\nROC AUC       1.0"},"exec_count":13,"output_type":"execute_result"},"1":{"data":{"image/png":"053de47950d538f760faa00d5144182c5d057aa9","text/plain":"<Figure size 216x216 with 1 Axes>"},"exec_count":13,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"5ad7f9","input":"","output":{"0":{"data":{"text/plain":"0      0\n1      0\n2      0\n3      0\n4      0\n      ..\n947    1\n948    1\n949    0\n950    0\n951    1\nName: Diabetic, Length: 905, dtype: int64"},"exec_count":14,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"701b43","input":"#SVM WITH STANDARD SCALER\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n#'svm__C': 0.1, 'svm__gamma': 1, 'svm__kernel': 'linear'\nclf2 = Pipeline(steps = [(\"scaler\", StandardScaler()), ('svm', SVC(kernel = 'linear', gamma='auto',  C = 0.1, probability = True))])\nclf2.fit(x_train, y_train)\ny_pred_clf2 = clf2.predict(x_test)\ny_prob_clf2 = clf2.predict_proba(x_test)\nconf_matrix(y_test, y_pred_clf2)\nget_scores(y_test, y_pred_clf2, y_prob_clf2[:, 1])","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>scores</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Accuracy</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Precision</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Recall</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>F1</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>ROC AUC</th>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"           scores\nAccuracy      1.0\nPrecision     1.0\nRecall        1.0\nF1            1.0\nROC AUC       1.0"},"exec_count":14,"output_type":"execute_result"},"1":{"data":{"image/png":"053de47950d538f760faa00d5144182c5d057aa9","text/plain":"<Figure size 216x216 with 1 Axes>"},"exec_count":14,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":48,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"9a51ee","input":"# Stress always and Quality Sleep\ndf = diabetes\nfig = px.violin(df, x=\"Stress_not at all\", y=\"SoundSleep\", color= \"Diabetic\", title=\"Quality sleep in relation to stress\")\nfig.show()","output":{"0":{"data":{"iframe":"a248a2a41b342ba557b7c668b6b29f0ca4e86d5f"},"exec_count":14,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"56555d","input":"#LOGISTIC REGRESSION\nfrom sklearn.linear_model import LogisticRegression\nreg = LogisticRegression(max_iter = 500, C = 1, penalty='l2')\nreg.fit(x_train, y_train)\ny_pred_reg = reg.predict(x_test)\ny_prob_reg = reg.predict_proba(x_test)\nconf_matrix(y_test, y_pred_reg)\nget_scores(y_test, y_pred_reg, y_prob_reg[:, 1])","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>scores</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Accuracy</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Precision</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Recall</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>F1</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>ROC AUC</th>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"           scores\nAccuracy      1.0\nPrecision     1.0\nRecall        1.0\nF1            1.0\nROC AUC       1.0"},"exec_count":15,"output_type":"execute_result"},"1":{"data":{"image/png":"053de47950d538f760faa00d5144182c5d057aa9","text/plain":"<Figure size 216x216 with 1 Axes>"},"exec_count":15,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"72d4e4","input":"# Blood Pressure and Alcohol\ndf = diabetes\nfig = px.bar(df, x=\"Alcohol_yes\", y=\"BPLevel_high\", color=\"BPLevel_high\") \nfig.update_layout(\n    title=\"Alcohol and blood pressure\",)\n\nfig.show()","output":{"0":{"data":{"iframe":"b6d933b40d699f702d89302d045992aa7b99340b"},"exec_count":15,"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"cc7811","input":"#RANDOM FORESTS\nfrom sklearn.ensemble import RandomForestClassifier\n\n# save selected model + tuned hyperparameters inside variable\nrfc = RandomForestClassifier(criterion= 'gini', max_depth= 4, max_features='sqrt', n_estimators=200)\n\n# fit/train model using training datasets (x_train: features; y_train: target variable)\nrfc.fit(x_train, y_train)\n\n# predict result\ny_pred_rfc = rfc.predict(x_test)\ny_prob_rfc = rfc.predict_proba(x_test)\nconf_matrix(y_test, y_pred_rfc)\nget_scores(y_test, y_pred_rfc, y_prob_rfc[:, 1])\n#acc_rfc = accuracy_score(y_test, y_pred_rfc)\n#f1_rfc = f1_score(y_test, y_pred_rfc)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>scores</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Accuracy</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Precision</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Recall</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>F1</th>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>ROC AUC</th>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"           scores\nAccuracy      1.0\nPrecision     1.0\nRecall        1.0\nF1            1.0\nROC AUC       1.0"},"exec_count":16,"output_type":"execute_result"},"1":{"data":{"image/png":"053de47950d538f760faa00d5144182c5d057aa9","text/plain":"<Figure size 216x216 with 1 Axes>"},"exec_count":16,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":50,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"52ec3a","input":"df = diabetes\nfig = px.bar(df, x=\"Diabetic\", y=\"BMI\", barmode='group', color = \"Diabetic\", height=400, title='BMI of diabetics compared to non-diabetics')\nfig.show()","output":{"0":{"data":{"iframe":"f6c4dbead85a9a70f30fb271195fd6ae30795304"},"exec_count":19,"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"b6bdd6","input":"#Original scientific paper concluded that 'Age', ‘Family_diabetes’, ‘Physically active’, ‘Regular Medicine’ and ‘Pdiabetes’ were the most important factors and prove useful to predicting whether or not someone has diabetes. They used a ratio of 75:25.","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"38c437","input":"#BMI, age, diabetic\nfig = px.bar(df, x=\"Stress_not at all\", y=\"Age_60 or older\", color = \"Age_60 or older\", \n             title=\"\")\nfig.show()","output":{"0":{"data":{"iframe":"8fd06f63791a53a000903a1afe5271605c429af9"},"exec_count":20,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"c17ece","input":"X = diabetes[\"BMI\"].to_numpy().reshape(-1, 1)\ny = diabetes[\"Pdiabetes_yes\"].to_numpy().reshape(-1, 1)","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"d5a7db","input":"#BMI, age, diabetic\nfig = px.bar(df, x=\"Stress_always\", y=\"Gender_Female\", barmode=\"group\", color = \"Age_60 or older\", title=\"BMI in Diabetics and Non-Diabetics relating to age group\")\nfig.show()","output":{"0":{"data":{"iframe":"deefae7c39add09afaa1ea172e389f976891aae7"},"exec_count":21,"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"549e4f","input":"df = diabetes\nfig= px.bar(df, x= \"PhysicallyActive\", color=\"Age\", barmode ='group',  title=\"Age Groups and Physical Activity\")\nfig.show()","output":{"0":{"data":{"iframe":"2eed38189c46a76a2ce380c2ec2aa428bc75a0a3"},"exec_count":22,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"afe916","input":"\nfig = px.bar(df, x=\"Diabetic\", y=\"Stress_always\", barmode=\"group\", color = \"Age_60 or older\", title=\"BMI in Diabetics and Non-Diabetics relating to age group\")\nfig.show()","output":{"0":{"data":{"iframe":"1e97fd196c27b1086ef644bb45e43167b8e50557"},"exec_count":22,"output_type":"execute_result"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"397795","input":"#Age and Physical Activity\nfig = px.violin(df, x= \"PhysicallyActive_one hr or more\", y=\"Age_60 or older\", color=\"Diabetic\", title = 'Physical Activity Relating to Age in Diabetic and Non Diabetic People')\nfig.show()","output":{"0":{"data":{"iframe":"b568618e99e9755f624f08c122105d39f60ee778"},"exec_count":24,"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"febf4f","input":"#Age and Physical Activity\nfig = px.violin(df, x= \"PhysicallyActive_none\", y=\"Age_60 or older\", color=\"Diabetic\")\nfig.show()","output":{"0":{"data":{"iframe":"4fdef3174962c773a1654e151dc7e962d3e3a037"},"exec_count":25,"output_type":"execute_result"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"60ed72","input":"#Blood Pressure and Physical Activity in older people\nfig = px.violin(df, x= \"PhysicallyActive_less than half an hr\", y=\"BPLevel_high\", color=\"Age_60 or older\",\n               title='Physical Activity affect Blood Pressure in older people')\nfig.show()","output":{"0":{"data":{"iframe":"be43aa5c6915644b3309fbafbc8584cd4326ba5a"},"exec_count":26,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"ac31a1","input":"#BMI, age, diabetic\nfig = px.bar(df, x=\"Stress_always\", y=\"Smoking_yes\", barmode=\"group\", color = \"Stress_always\", title=\"Does Smoking affect Stress levels?\")\nfig.show()","output":{"0":{"data":{"iframe":"4585e75b3f143546f3e4712dde1d150a837f6aef"},"exec_count":27,"output_type":"execute_result"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"bc7687","input":"#Family_diabetes Pdiabetes \nfig = px.bar(df, x= \"Family_Diabetes_yes\", y=\"Pdiabetes_yes\", barmode = 'group', color=\"Diabetic\")\nfig.show()","output":{"0":{"data":{"iframe":"fc30f9000838654f6bd06685e68026e34a919126"},"exec_count":28,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"fcb44a","input":"#Family_diabetes Pdiabetes \nfig= px.violin(df, x= \"RegularMedicine_yes\", y=\"Age_60 or older\", color=\"Diabetic\")\nfig.show()","output":{"0":{"data":{"iframe":"fd15837e9a87fd67c4142c166c261ec32d964961"},"exec_count":29,"output_type":"execute_result"}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"d2898c","input":"df = diabetes\nfig = px.bar(df, x=\"Stress_very often\", y=\"SoundSleep\", barmode=\"group\", color = \"SoundSleep\", title=\" Sleep Concived Affecting Stress\")\nfig.show()","output":{"0":{"data":{"iframe":"8464764a361976f8fa91afef1c9bb25ef46a6737"},"exec_count":30,"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"f84403","input":"#BMI, age, diabetic\nfig = px.bar(df, x=\"JunkFood\", y=\"Age\", barmode=\"group\", color = \"Diabetic\",\n             title=\"Determining if Junkfood affects Diabetic People\")\nfig.show()","output":{"0":{"data":{"iframe":"8b6edba83a973e4aff52d7979ffcefe16531484b"},"exec_count":31,"output_type":"execute_result"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"ce428e","input":"diabetes","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>BMI</th>\n      <th>Sleep</th>\n      <th>SoundSleep</th>\n      <th>Pregancies</th>\n      <th>Diabetic</th>\n      <th>Age_40-49</th>\n      <th>Age_50-59</th>\n      <th>Age_60 or older</th>\n      <th>Age_less than 40</th>\n      <th>Gender_Female</th>\n      <th>...</th>\n      <th>BPLevel_High</th>\n      <th>BPLevel_Low</th>\n      <th>BPLevel_high</th>\n      <th>BPLevel_low</th>\n      <th>BPLevel_normal</th>\n      <th>BPLevel_normal</th>\n      <th>Pdiabetes_0</th>\n      <th>Pdiabetes_yes</th>\n      <th>UriationFreq_not much</th>\n      <th>UriationFreq_quite often</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>39.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>28.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>24.0</td>\n      <td>6.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>27.0</td>\n      <td>8.0</td>\n      <td>8.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>900</th>\n      <td>25.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>901</th>\n      <td>27.0</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>902</th>\n      <td>23.0</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>903</th>\n      <td>27.0</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>904</th>\n      <td>30.0</td>\n      <td>7.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>905 rows × 44 columns</p>\n</div>","text/plain":"      BMI  Sleep  SoundSleep  Pregancies  Diabetic  Age_40-49  Age_50-59  \\\n0    39.0    8.0         6.0         0.0         0          0          1   \n1    28.0    8.0         6.0         0.0         0          0          1   \n2    24.0    6.0         6.0         0.0         0          1          0   \n3    23.0    8.0         6.0         0.0         0          0          1   \n4    27.0    8.0         8.0         0.0         0          1          0   \n..    ...    ...         ...         ...       ...        ...        ...   \n900  25.0    8.0         6.0         0.0         1          0          0   \n901  27.0    6.0         5.0         0.0         1          0          0   \n902  23.0    6.0         5.0         0.0         0          0          0   \n903  27.0    6.0         5.0         0.0         0          0          0   \n904  30.0    7.0         4.0         2.0         1          0          0   \n\n     Age_60 or older  Age_less than 40  Gender_Female  ...  BPLevel_High  \\\n0                  0                 0              0  ...             0   \n1                  0                 0              0  ...             0   \n2                  0                 0              0  ...             0   \n3                  0                 0              0  ...             0   \n4                  0                 0              0  ...             0   \n..               ...               ...            ...  ...           ...   \n900                0                 1              0  ...             0   \n901                1                 0              0  ...             0   \n902                1                 0              0  ...             0   \n903                1                 0              0  ...             0   \n904                1                 0              1  ...             0   \n\n     BPLevel_Low  BPLevel_high  BPLevel_low  BPLevel_normal  BPLevel_normal   \\\n0              0             1            0               0                0   \n1              0             0            0               1                0   \n2              0             0            0               1                0   \n3              0             0            0               1                0   \n4              0             0            0               1                0   \n..           ...           ...          ...             ...              ...   \n900            0             0            0               1                0   \n901            0             1            0               0                0   \n902            0             1            0               0                0   \n903            0             1            0               0                0   \n904            0             1            0               0                0   \n\n     Pdiabetes_0  Pdiabetes_yes  UriationFreq_not much  \\\n0              1              0                      1   \n1              1              0                      1   \n2              1              0                      1   \n3              1              0                      1   \n4              1              0                      1   \n..           ...            ...                    ...   \n900            1              0                      1   \n901            1              0                      0   \n902            1              0                      1   \n903            1              0                      1   \n904            1              0                      0   \n\n     UriationFreq_quite often  \n0                           0  \n1                           0  \n2                           0  \n3                           0  \n4                           0  \n..                        ...  \n900                         0  \n901                         1  \n902                         0  \n903                         0  \n904                         1  \n\n[905 rows x 44 columns]"},"exec_count":33,"output_type":"execute_result"}},"pos":44,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"dc63a9","input":"# BMI and Gender\ndf= diabetes\nfig = px.violin(df, x=\"Gender_Male\", y=\"BMI\", color=\"Gender_Male\")\n\nfig.update_layout(\n    title=\"BMI of Males\",)\n\nfig.show()","output":{"0":{"data":{"iframe":"a3c853ce99865baaa14d54915b0aecbe6df034c4"},"exec_count":36,"output_type":"execute_result"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"d3a58e","input":"# BMI and Gender\ndf= diabetes\nfig = px.violin(df, x=\"Gender_Female\", y=\"BMI\", color=\"Gender_Female\")\n\nfig.update_layout(\n    title=\"BMI of Females\",)\n\nfig.show()","output":{"0":{"data":{"iframe":"8536dd76cc2b6b4e75d08855a40fd6a506debeff"},"exec_count":38,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"58ef44","input":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics\nimport plotly.express as px\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\nimport sys, os","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"8255d7","input":"# hyperparameter tuning","pos":51,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"85995d","input":"# term 1 RANDOM FOREST\nconf_matrix(y_test, y_pred_rfc)\nget_scores(y_test, y_pred_rfc, y_prob_rfc[:, 1])\nacc_rfc = accuracy_score(y_test, y_pred_rfc)\nf1_rfc = f1_score(y_test, y_pred_rfc)","output":{"0":{"data":{"image/png":"b3cb895e6ce21eb518256127241237d00332aad3","text/plain":"<Figure size 216x216 with 1 Axes>"},"exec_count":41,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":53,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"25bdc6","input":"# term 2 LOGISTIC REGRESSION\nconf_matrix(y_test, y_pred_reg) \nget_scores(y_test, y_pred_reg, y_prob_reg[:, 1])\nacc_reg = accuracy_score(y_test, y_pred_reg)\nf1_reg = f1_score(y_test, y_pred_reg)","output":{"0":{"data":{"image/png":"b3cb895e6ce21eb518256127241237d00332aad3","text/plain":"<Figure size 216x216 with 1 Axes>"},"exec_count":42,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":54,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"d6b3b1","input":"diabetes.dropna(inplace = True)","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"7f19c6","input":"# random forest\n\n# define parameter\ngrid_params_rfc = {'criterion' :['gini'],\n                   'bootstrap': [True, False],\n                   'max_depth': [4,5,6,7,8, None],\n                   'max_features': ['sqrt'],\n                   'min_samples_leaf': [1, 2, 4],\n                   'min_samples_split': [2, 5, 10],\n                   'n_estimators': [5, 10, 50, 100]}\n\n# call grid search function, specify which model you want to use + parameter\n# save the whole thing into a variable\ngs_rfc = GridSearchCV(estimator=RandomForestClassifier(), param_grid=grid_params_rfc, cv= 5)\n\n\n# fit/train the model\ngs_rfc_res = gs_rfc.fit(x_train, y_train)\n\n\n# print the calculated best parameters\nprint(gs_rfc_res.best_params_)","output":{"0":{"name":"stdout","output_type":"stream","text":"{'bootstrap': True, 'criterion': 'gini', 'max_depth': 5, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 100}\n"}},"pos":55,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"63d4bb","input":"# logistic regression\n# dictionary = {key:value}\n# parameters = {parameter: []}\n# https://stackoverflow.com/questions/19018333/gridsearchcv-on-logisticregression-in-scikit-learn\n\ngrid_params_reg = {'penalty':['l2'],\n                   'C':[1, 10, 100, 1000]}\n\ngs_reg = GridSearchCV(estimator = LogisticRegression(max_iter=500),\n                           param_grid = grid_params_reg,\n                           cv = 5,\n                           verbose=0)\ngs_reg_res = gs_reg.fit(x_train, y_train)\n\n\nprint(gs_reg_res.best_params_)","output":{"0":{"name":"stdout","output_type":"stream","text":"{'C': 1, 'penalty': 'l2'}\n"}},"pos":56,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"b6c23f","input":"diabetes['Diabetic'] = diabetes['Diabetic'].replace('no', 0)\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace(' no', 0)\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace('yes', 1)\ndiabetes['Diabetic']","output":{"0":{"data":{"text/plain":"0      0\n1      0\n2      0\n3      0\n4      0\n      ..\n947    1\n948    1\n949    0\n950    0\n951    1\nName: Diabetic, Length: 905, dtype: int64"},"exec_count":47,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":49,"id":"4edca4","input":"#Age Gender BMI Diabetic\nimport plotly.express as px\nfig = px.violin(diabetes, x=\"Gender\", y=\"Age\",color=\"Diabetic\",\n            title=\" Age and Gender of Diabetic Patitents\")\n\nfig.show()","output":{"0":{"data":{"iframe":"f5211337167dca85d01e0721b3dc2b90b87c0c5b"},"exec_count":49,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"d5c7e5","input":"diabetes = pd.read_csv(\"./Data/diabetes_dataset__2019.csv\")","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"e739a3","input":"#cleaning the data -- dropping missing and duplicate values for sanity\ndiabetes.dropna(inplace = True)\ndiabetes = diabetes.reset_index(drop=True)\n\nlength = len(diabetes.index) #save length of array of later\nlength","output":{"0":{"data":{"text/plain":"905"},"exec_count":6,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"47815f","input":"#converting categorical variables into dummy variables\ncol_category = ['Age','Gender','Family_Diabetes','highBP','PhysicallyActive','Smoking','Alcohol','RegularMedicine',\n                'JunkFood','Stress','BPLevel','Pdiabetes','UriationFreq']\nfor col in col_category:\n    diabetes = pd.concat([diabetes.drop(col, axis=1), pd.get_dummies(diabetes[col], prefix=col, prefix_sep='_')], axis=1)","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"5a9fd4","input":"diabetes.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Family_Diabetes</th>\n      <th>highBP</th>\n      <th>PhysicallyActive</th>\n      <th>BMI</th>\n      <th>Smoking</th>\n      <th>Alcohol</th>\n      <th>Sleep</th>\n      <th>SoundSleep</th>\n      <th>RegularMedicine</th>\n      <th>JunkFood</th>\n      <th>Stress</th>\n      <th>BPLevel</th>\n      <th>Pregancies</th>\n      <th>Pdiabetes</th>\n      <th>UriationFreq</th>\n      <th>Diabetic</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>50-59</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>one hr or more</td>\n      <td>39.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>no</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>high</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>50-59</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>less than half an hr</td>\n      <td>28.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>yes</td>\n      <td>very often</td>\n      <td>sometimes</td>\n      <td>normal</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>40-49</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>no</td>\n      <td>one hr or more</td>\n      <td>24.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>6.0</td>\n      <td>6.0</td>\n      <td>no</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>normal</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>50-59</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>no</td>\n      <td>one hr or more</td>\n      <td>23.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>no</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>normal</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>40-49</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>no</td>\n      <td>less than half an hr</td>\n      <td>27.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>8.0</td>\n      <td>8.0</td>\n      <td>no</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>normal</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     Age Gender Family_Diabetes highBP      PhysicallyActive   BMI Smoking  \\\n0  50-59   Male              no    yes        one hr or more  39.0      no   \n1  50-59   Male              no    yes  less than half an hr  28.0      no   \n2  40-49   Male              no     no        one hr or more  24.0      no   \n3  50-59   Male              no     no        one hr or more  23.0      no   \n4  40-49   Male              no     no  less than half an hr  27.0      no   \n\n  Alcohol  Sleep  SoundSleep RegularMedicine      JunkFood     Stress BPLevel  \\\n0      no    8.0         6.0              no  occasionally  sometimes    high   \n1      no    8.0         6.0             yes    very often  sometimes  normal   \n2      no    6.0         6.0              no  occasionally  sometimes  normal   \n3      no    8.0         6.0              no  occasionally  sometimes  normal   \n4      no    8.0         8.0              no  occasionally  sometimes  normal   \n\n   Pregancies Pdiabetes UriationFreq Diabetic  \n0         0.0         0     not much       no  \n1         0.0         0     not much       no  \n2         0.0         0     not much       no  \n3         0.0         0     not much       no  \n4         0.0         0     not much       no  "},"exec_count":7,"output_type":"execute_result"}},"pos":5,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"267f6c","input":"diabetes.tail()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Family_Diabetes</th>\n      <th>highBP</th>\n      <th>PhysicallyActive</th>\n      <th>BMI</th>\n      <th>Smoking</th>\n      <th>Alcohol</th>\n      <th>Sleep</th>\n      <th>SoundSleep</th>\n      <th>RegularMedicine</th>\n      <th>JunkFood</th>\n      <th>Stress</th>\n      <th>BPLevel</th>\n      <th>Pregancies</th>\n      <th>Pdiabetes</th>\n      <th>UriationFreq</th>\n      <th>Diabetic</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>948</th>\n      <td>60 or older</td>\n      <td>Male</td>\n      <td>yes</td>\n      <td>yes</td>\n      <td>more than half an hr</td>\n      <td>27.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>yes</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>high</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>quite often</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>949</th>\n      <td>60 or older</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>none</td>\n      <td>23.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>yes</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>high</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>950</th>\n      <td>60 or older</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>less than half an hr</td>\n      <td>27.0</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>6.0</td>\n      <td>5.0</td>\n      <td>yes</td>\n      <td>occasionally</td>\n      <td>very often</td>\n      <td>high</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>951</th>\n      <td>60 or older</td>\n      <td>Female</td>\n      <td>yes</td>\n      <td>yes</td>\n      <td>one hr or more</td>\n      <td>30.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>7.0</td>\n      <td>4.0</td>\n      <td>yes</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>high</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>quite often</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>952</th>\n      <td>$$$$$$</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"             Age  Gender Family_Diabetes highBP      PhysicallyActive   BMI  \\\n948  60 or older    Male             yes    yes  more than half an hr  27.0   \n949  60 or older    Male              no    yes                  none  23.0   \n950  60 or older    Male              no    yes  less than half an hr  27.0   \n951  60 or older  Female             yes    yes        one hr or more  30.0   \n952       $$$$$$     NaN             NaN    NaN                   NaN   NaN   \n\n    Smoking Alcohol  Sleep  SoundSleep RegularMedicine      JunkFood  \\\n948      no      no    6.0         5.0             yes  occasionally   \n949      no      no    6.0         5.0             yes  occasionally   \n950      no     yes    6.0         5.0             yes  occasionally   \n951      no      no    7.0         4.0             yes  occasionally   \n952     NaN     NaN    NaN         NaN             NaN           NaN   \n\n         Stress BPLevel  Pregancies Pdiabetes UriationFreq Diabetic  \n948   sometimes    high         0.0         0  quite often      yes  \n949   sometimes    high         0.0         0     not much       no  \n950  very often    high         0.0         0     not much       no  \n951   sometimes    high         2.0         0  quite often      yes  \n952         NaN     NaN         NaN       NaN          NaN      NaN  "},"exec_count":8,"output_type":"execute_result"}},"pos":6,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"bf1fd1","input":"#coverting target variable (yes/no) into 0s and 1s\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace('no', 0)\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace(' no', 0)\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace('yes', 1)\ndiabetes['Diabetic']","output":{"0":{"data":{"text/plain":"0      0\n1      0\n2      0\n3      0\n4      0\n      ..\n900    1\n901    1\n902    0\n903    0\n904    1\nName: Diabetic, Length: 905, dtype: int64"},"exec_count":8,"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"0653c0","input":"print(diabetes.columns)\nprint(\"\")\nprint(diabetes.shape)","output":{"0":{"name":"stdout","output_type":"stream","text":"Index(['Age', 'Gender', 'Family_Diabetes', 'highBP', 'PhysicallyActive', 'BMI',\n       'Smoking', 'Alcohol', 'Sleep', 'SoundSleep', 'RegularMedicine',\n       'JunkFood', 'Stress', 'BPLevel', 'Pregancies', 'Pdiabetes',\n       'UriationFreq', 'Diabetic'],\n      dtype='object')\n\n(953, 18)\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"489269","input":"def conf_matrix(y, y_pred):\n    fig, ax =plt.subplots(figsize=(3,3))\n    labels=['No','Yes']\n    ax=sns.heatmap(confusion_matrix(y, y_pred), annot=True, cmap=\"Blues\", fmt='g', cbar=False)\n    ax.set_xlabel('\\nPredicted Values')\n    ax.set_ylabel('Actual Values')\n    plt.title('Pass or fail')\n    ax.xaxis.set_ticklabels(labels); ax.yaxis.set_ticklabels(labels);\n\ndef get_scores(y, y_pred, y_prob):\n    data={'Accuracy': np.round(accuracy_score(y, y_pred),3),\n    'Precision':np.round(precision_score(y, y_pred),3),\n    'Recall':np.round(recall_score(y, y_pred),3),\n    'F1':np.round(f1_score(y, y_pred),3),\n    'ROC AUC':np.round(roc_auc_score(y, y_prob),3)}\n    scores_df = pd.Series(data).to_frame('scores')\n    return scores_df","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"52caef","input":"### Exploratory Data Analysis\n\n","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"683bd6","input":"### **Data Cleaning**\n\n","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"bf3b77","input":"### Model fitting\n\n","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"c7b61a","input":"### Load Dataset\n\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"f699ca","input":"### Import Packages\n\n","pos":0,"type":"cell"}
{"id":0,"time":1655505351452,"type":"user"}
{"last_load":1655505350999,"type":"file"}