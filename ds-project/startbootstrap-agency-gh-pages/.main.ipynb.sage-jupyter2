{"backend_state":"running","connection_file":"/projects/013ca607-9af4-4b8b-9eb4-c9fa83e65e2d/.local/share/jupyter/runtime/kernel-5470f374-60c8-4b64-882a-f177d141d5cd.json","kernel":"elastic-searchers","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.12"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1655923983662,"id":"0653c0","input":"print(diabetes.columns)\nprint(\"\")\nprint(diabetes.shape)","kernel":"elastic-searchers","pos":7,"start":1655923983662,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983662,"id":"267f6c","input":"diabetes.tail()","kernel":"elastic-searchers","pos":6,"scrolled":true,"start":1655923983662,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983662,"id":"5a9fd4","input":"diabetes.head()","kernel":"elastic-searchers","pos":5,"scrolled":true,"start":1655923983662,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983664,"id":"91873a","input":"diabetes.info()","kernel":"elastic-searchers","pos":8,"start":1655923983664,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983666,"id":"2d114d","input":"# Stress always and Quality Sleep\ndf = diabetes\nfig = px.violin(df, x=\"Stress_always\", y=\"SoundSleep\", color= \"Diabetic\", title=\"Quality sleep in relation to stress\")\nfig.show()\nfig.write_html('sleep_stress.html')","kernel":"elastic-searchers","pos":21,"start":1655923983666,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983666,"id":"9a51ee","input":"# Stress always and Quality Sleep\ndf = diabetes\nfig = px.violin(df, x=\"Stress_not at all\", y=\"SoundSleep\", color= \"Diabetic\", title=\"Quality sleep in relation to stress\")\nfig.show()","kernel":"elastic-searchers","pos":22,"start":1655923983666,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983667,"id":"52ec3a","input":"df = diabetes\nfig = px.bar(df, x=\"Diabetic\", y=\"BMI\", barmode='group', color = \"Diabetic\", height=400, title='BMI of diabetics compared to non-diabetics')\nfig.show()","kernel":"elastic-searchers","pos":27,"start":1655923983667,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983667,"id":"dc63a9","input":"# BMI and Gender\ndf= diabetes\nfig = px.violin(df, x=\"Gender\", y=\"BMI\", color=\"Gender\")\n\nfig.update_layout(\n    title=\"BMI of Males\",)\n\nfig.show()\nfig.write_html(\"BMI_gender.html\")","kernel":"elastic-searchers","pos":25,"start":1655923983667,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983668,"id":"afe916","input":"\nfig = px.bar(df, x=\"Diabetic\", y=\"Stress_always\", barmode=\"group\", color = \"Age_60 or older\", title=\"BMI in Diabetics and Non-Diabetics relating to age group\")\nfig.show()","kernel":"elastic-searchers","pos":30,"start":1655923983668,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983668,"id":"d5a7db","input":"#BMI, age, diabetic\nfig = px.bar(df, x=\"Stress_always\", y=\"Gender_Female\", barmode=\"group\", color = \"Age_60 or older\", title=\"BMI in Diabetics and Non-Diabetics relating to age group\")\nfig.show()","kernel":"elastic-searchers","pos":29,"start":1655923983668,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983670,"id":"60ed72","input":"#Blood Pressure and Physical Activity in older people\nfig = px.violin(df, x= \"PhysicallyActive_less than half an hr\", y=\"BPLevel_high\", color=\"Age_60 or older\",\n               title='Physical Activity affect Blood Pressure in older people')\nfig.show()","kernel":"elastic-searchers","pos":34,"start":1655923983670,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983670,"id":"febf4f","input":"#Age and Physical Activity\nfig = px.violin(df, x= \"PhysicallyActive_none\", y=\"Age_60 or older\", color=\"Diabetic\")\nfig.show()","kernel":"elastic-searchers","pos":33,"start":1655923983670,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983671,"id":"bc7687","input":"#Family_diabetes Pdiabetes \nfig = px.bar(df, x= \"Family_Diabetes_yes\", y=\"Pdiabetes_yes\", barmode = 'group', color=\"Diabetic\")\nfig.show()","kernel":"elastic-searchers","pos":36,"start":1655923983671,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983671,"id":"d2898c","input":"df = diabetes\nfig = px.bar(df, x=\"Stress_very often\", y=\"SoundSleep\", barmode=\"group\", color = \"SoundSleep\", title=\" Sleep Concived Affecting Stress\")\nfig.show()","kernel":"elastic-searchers","pos":38,"start":1655923983671,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983671,"id":"fcb44a","input":"#Family_diabetes Pdiabetes \nfig= px.violin(df, x= \"RegularMedicine_yes\", y=\"Age_60 or older\", color=\"Diabetic\")\nfig.show()","kernel":"elastic-searchers","pos":37,"start":1655923983671,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983676,"id":"25bdc6","input":"# term 2 LOGISTIC REGRESSION\nconf_matrix(y_test, y_pred_reg) \nget_scores(y_test, y_pred_reg, y_prob_reg[:, 1])\nacc_reg = accuracy_score(y_test, y_pred_reg)\nf1_reg = f1_score(y_test, y_pred_reg)","kernel":"elastic-searchers","pos":54,"start":1655923983676,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983676,"id":"8255d7","input":"# hyperparameter tuning","kernel":"elastic-searchers","pos":51,"start":1655923983676,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983677,"id":"15f99e","input":"# svm\n# https://www.geeksforgeeks.org/svm-hyperparameter-tuning-using-gridsearchcv-ml/\n# fitting the model for grid search\n\n\n# define parameter\ngrid_params_svm = {'C': [0.1, 1, 10, 100, 1000],\n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001, 'auto'],\n              'kernel': ['rbf','poly','linear','sigmoid']}\n\n\n# call grid search function, specify which model you want to use + parameter\n# save the whole thing into a variable\ngs_svm = GridSearchCV(estimator = svm.SVC(probability=True),\n                      param_grid = grid_params_svm,\n                      cv = 5,\n                      verbose=0)\n\n\n# fit the model\ngs_svm_res = gs_svm.fit(x_train, y_train)\nprint(gs_svm_res.best_params_)","kernel":"elastic-searchers","pos":57,"start":1655923983677,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983677,"id":"7f19c6","input":"# random forest\n\n# define parameter\ngrid_params_rfc = {'criterion' :['gini'],\n                   'bootstrap': [True, False],\n                   'max_depth': [4,5,6,7,8, None],\n                   'max_features': ['sqrt'],\n                   'min_samples_leaf': [1, 2, 4],\n                   'min_samples_split': [2, 5, 10],\n                   'n_estimators': [5, 10, 50, 100]}\n\n# call grid search function, specify which model you want to use + parameter\n# save the whole thing into a variable\ngs_rfc = GridSearchCV(estimator=RandomForestClassifier(), param_grid=grid_params_rfc, cv= 5)\n\n\n# fit/train the model\ngs_rfc_res = gs_rfc.fit(x_train, y_train)\n\n\n# print the calculated best parameters\nprint(gs_rfc_res.best_params_)","kernel":"elastic-searchers","pos":55,"start":1655923983677,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983678,"id":"57bc9b","input":"# save accuracy and f1 score of each model into a list\naccuracy = [acc_reg, acc_rfc, acc_svm, acc_svm2]\nf1 = [f1_reg, f1_rfc, f1_svm, f1_svm2]\nmodel = ['logistic regression', 'random forest', 'svm', 'svm with standard scalar']\n\n\n# plot accuracy\nfig = px.scatter(x = model, y = accuracy, title = 'The Accuracy Score of Each Model')\nfig.update_xaxes(title_text = \"Models\")\nfig.update_yaxes(range = [0,1.1], title_text = \"Accuracy\")\nfig.show()\n# fig.write_html(\"Accuracy and f1 scores\")\n\n\n# plot f1 score\nfig = px.scatter(x = model, y = f1, title = 'The F1 Score of Each Model')\nfig.update_xaxes(title_text = \"Models\")\nfig.update_yaxes(range = [0,1.1], title_text = \"F1 Scores\")\nfig.show()\n# fig.write_html(\"Accuracy and f1 scores\")\nfig.write_html(\"Accuracy and f1 scores\")","kernel":"elastic-searchers","pos":62,"start":1655923983678,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983678,"id":"bb21df","input":"# save accuracy and f1 score of each model into a list\naccuracy = [acc_reg, acc_rfc, acc_svm, acc_svm2]\nf1 = [f1_reg, f1_rfc, f1_svm, f1_svm2]\nmodel = ['logistic regression', 'random forest', 'svm', 'svm with standard scalar']\n\n\n# plot accuracy\nfig = px.bar(x = model, y = accuracy, title = 'The Accuracy Score of Each Model')\nfig.update_xaxes(title_text = \"Models\")\nfig.update_yaxes(title_text = \"Accuracy\")\nfig.show()\n# fig.write_html(\"Accuracy and f1 scores\")\n\n\n# plot f1 score\nfig = px.bar(x = model, y = f1, title = 'The F1 Score of Each Model')\nfig.update_xaxes(title_text = \"Models\")\nfig.update_yaxes(title_text = \"F1 Scores\")\nfig.show()\n# fig.write_html(\"Accuracy and f1 scores\")","kernel":"elastic-searchers","pos":61,"start":1655923983678,"state":"done","type":"cell"}
{"cell_type":"code","end":1655923983678,"id":"e62e4e","input":"# svm with standard scaler\n# https://www.geeksforgeeks.org/svm-hyperparameter-tuning-using-gridsearchcv-ml/\n\n\npipeline =Pipeline(steps = [(\"scaler\", StandardScaler()), ('svm', SVC(probability = True))])\n\n\nprint(pipeline)\n\ngrid_params_svm2 = {'svm__C': [0.1, 1, 10, 100, 1000],\n              'svm__gamma': [1, 0.1, 0.01, 0.001, 0.0001, 'auto'],\n              'svm__kernel': ['rbf','poly','linear','sigmoid']}\n\ngs_svm2 = GridSearchCV(estimator = pipeline,\n                           param_grid = grid_params_svm2,\n                           cv = 5,\n                           verbose=0)\n\ngs_svm_res2 = gs_svm2.fit(x_train, y_train)\nprint(gs_svm_res2.best_params_)","kernel":"elastic-searchers","pos":58,"start":1655923983678,"state":"done","type":"cell"}
{"cell_type":"code","end":1655924166074,"exec_count":29,"id":"489269","input":"def conf_matrix(y, y_pred):\n    fig, ax =plt.subplots(figsize=(3,3))\n    labels=['No','Yes']\n    ax=sns.heatmap(confusion_matrix(y, y_pred), annot=True, cmap=\"Blues\", fmt='g', cbar=False)\n    ax.set_xlabel('\\nPredicted Values')\n    ax.set_ylabel('Actual Values')\n    plt.title('Pass or fail')\n    ax.xaxis.set_ticklabels(labels); ax.yaxis.set_ticklabels(labels);\n\ndef get_scores(y, y_pred, y_prob):\n    data={'Accuracy': np.round(accuracy_score(y, y_pred),3),\n    'Precision':np.round(precision_score(y, y_pred),3),\n    'Recall':np.round(recall_score(y, y_pred),3),\n    'F1':np.round(f1_score(y, y_pred),3),\n    'ROC AUC':np.round(roc_auc_score(y, y_prob),3)}\n    scores_df = pd.Series(data).to_frame('scores')\n    return scores_df","kernel":"elastic-searchers","pos":40,"start":1655924166040,"state":"done","type":"cell"}
{"cell_type":"code","end":1655924166784,"exec_count":30,"id":"c17ece","input":"X = diabetes[\"BMI\"].to_numpy().reshape(-1, 1)\ny = diabetes[\"Diabetic\"].to_numpy().reshape(-1, 1)","kernel":"elastic-searchers","pos":41,"start":1655924166768,"state":"done","type":"cell"}
{"cell_type":"code","end":1655924170801,"exec_count":31,"id":"91eb84","input":"#split data into training and testing\ntrain, test = train_test_split(diabetes, test_size = 0.25, shuffle = True)","kernel":"elastic-searchers","pos":44,"start":1655924170767,"state":"done","type":"cell"}
{"cell_type":"code","end":1655924171600,"exec_count":32,"id":"8d1966","input":"xcols = train.columns\nx_train = train[xcols]\nx_test = test[xcols]\ny_train = train['Diabetic']\ny_test = test['Diabetic']","kernel":"elastic-searchers","pos":45,"start":1655924171588,"state":"done","type":"cell"}
{"cell_type":"code","end":1655924185365,"exec_count":35,"id":"56555d","input":"#LOGISTIC REGRESSION\nfrom sklearn.linear_model import LogisticRegression\nreg = LogisticRegression(max_iter = 500, C = 1, penalty='l2')\nreg.fit(x_train, y_train)\ny_pred_reg = reg.predict(x_test)\ny_prob_reg = reg.predict_proba(x_test)\nconf_matrix(y_test, y_pred_reg)\nget_scores(y_test, y_pred_reg, y_prob_reg[:, 1])\n\nacc_reg = accuracy_score(y_test, y_pred_reg)\nf1_reg = f1_score(y_test, y_pred_reg)","kernel":"elastic-searchers","output":{"0":{"data":{"image/png":"0cb6e550e226b777cbae28cc32fe78d196b79d0a","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":49,"start":1655924184924,"state":"done","type":"cell"}
{"cell_type":"code","end":1655924501399,"exec_count":40,"id":"676d89","input":"# save accuracy and f1 score of each model into a list\naccuracy = [acc_reg, acc_rfc, acc_svm, acc_svm2]\nf1 = [f1_reg, f1_rfc, f1_svm, f1_svm2]\nmodel = ['logistic regression', 'random forest', 'svm', 'svm with standard scalar']\n\n\n# plot accuracy\nfig = px.line(x = model, y = accuracy, title = 'The Accuracy Score of Each Model')\nfig.update_xaxes(title_text = \"Models\")\nfig.update_yaxes(range = [0,1.1], title_text = \"Accuracy\")\nfig.show()\nfig.write_html(\"Accuracy_scores.html\")\n\n\n# plot f1 score\nfig = px.line(x = model, y = f1, title = 'The F1 Score of Each Model')\nfig.update_xaxes(title_text = \"Models\")\nfig.update_yaxes(range = [0,1.1], title_text = \"F1 Scores\")\nfig.show()\nfig.write_html(\"Accuracy_and_F1_scores.html\")","kernel":"elastic-searchers","output":{"0":{"data":{"iframe":"0fad6f6fae78400f5b71b71623a3cf4860034f24"}},"1":{"data":{"iframe":"746b970e7f1e7ac1854f7086f1a11569c64c5279"}}},"pos":60,"start":1655924501095,"state":"done","type":"cell"}
{"cell_type":"code","end":1655930274488,"exec_count":67,"id":"b6bdd6","input":"#Original scientific paper concluded that 'Age', ‘Family_diabetes’, ‘Physically active’, ‘Regular Medicine’ and ‘Pdiabetes’ were the most important factors and prove useful to predicting whether or not someone has diabetes. They used a ratio of 75:25.","kernel":"elastic-searchers","pos":3,"start":1655930274484,"state":"done","type":"cell"}
{"cell_type":"code","end":1655930309511,"exec_count":71,"id":"549e4f","input":"df = diabetes\nfig= px.bar(df, x= \"PhysicallyActive\", color=\"Age\", barmode ='group',  title=\"Age Groups and Physical Activity\")\nfig.show()\nfig.write_html(\"AgeGroups_PhysicalActivity.html\")","kernel":"elastic-searchers","output":{"0":{"data":{"iframe":"03e89f896c7085996e0f8e1ab4be45248e21a691"}}},"pos":13,"scrolled":true,"start":1655930309410,"state":"done","type":"cell"}
{"cell_type":"code","end":1655930490574,"exec_count":77,"id":"b6c23f","input":"\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace('no', 0)\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace(' no', 0)\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace('yes', 1)\ndiabetes['Diabetic']","kernel":"elastic-searchers","output":{"0":{"data":{"text/plain":"0      0\n1      0\n2      0\n3      0\n4      0\n      ..\n947    1\n948    1\n949    0\n950    0\n951    1\nName: Diabetic, Length: 905, dtype: int64"},"exec_count":77}},"pos":10,"start":1655930490571,"state":"done","type":"cell"}
{"cell_type":"code","end":1655930495602,"exec_count":79,"id":"4edca4","input":"#Age Gender Diabetic\nimport plotly.express as px\ndf = diabetes\nfig = px.violin(df, x=\"Gender_Female\", y=\"Age\",color=\"Diabetic\", title=\" Age and Gender of Diabetic Patients\")\n\nfig.show()\nfig.write_html(\"Age_Gender_DiabeticPatitents.html\")","kernel":"elastic-searchers","output":{"0":{"data":{"iframe":"5cab415d0aa7efa9f53a6a79455b65db1047d22e"}}},"pos":11,"start":1655930495436,"state":"done","type":"cell"}
{"cell_type":"code","end":1655930652203,"exec_count":83,"id":"38c437","input":"#BMI, age, diabetic\nfig = px.bar(df, x=\"Stress\", y=\"Age\", color = \"Age\", \n             title=\"\")\nfig.show()\nfig.write_html(\"Stress_age.html\")","kernel":"elastic-searchers","output":{"0":{"data":{"iframe":"5e41de8e366c430f544e798b477293cf7380847e"}}},"pos":28,"start":1655930652064,"state":"done","type":"cell"}
{"cell_type":"code","end":1655930884099,"exec_count":88,"id":"87caff","input":"#BMI, age, diabetic\ndf = diabetes\nfig = px.bar(df, x=\"Diabetic\", y=\"BMI\", barmode=\"group\", color = \"Age_60 or older\", title=\"BMI in Diabetics and Non-Diabetics relating to age group\")\nfig.show()","kernel":"elastic-searchers","output":{"0":{"data":{"iframe":"56d0906e7cdbacf00df62284f6ee3ba3c75b0fae"}}},"pos":20,"start":1655930884028,"state":"done","type":"cell"}
{"cell_type":"code","end":1655930960175,"exec_count":91,"id":"d3a58e","input":"# BMI and Gender\ndf= diabetes\nfig = px.violin(df, x=\"Gender_Female\", y=\"BMI\", color=\"Gender_Female\")\n\nfig.update_layout(\n    title=\"BMI of Each Gender\",)\n\nfig.show()\nfig.write_html(\"BMI.html\")","kernel":"elastic-searchers","output":{"0":{"data":{"iframe":"c1e79094ea680b613a9d3a4596bb1067d75a003b"}}},"pos":24,"start":1655930960085,"state":"done","type":"cell"}
{"cell_type":"code","end":1655932392169,"exec_count":95,"id":"701b43","input":"#SVM WITH STANDARD SCALER\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n#'svm__C': 0.1, 'svm__gamma': 1, 'svm__kernel': 'linear'\nclf2 = Pipeline(steps = [(\"scaler\", StandardScaler()), ('svm', SVC(kernel = 'linear', gamma='auto',  C = 0.1, probability = True))])\nclf2.fit(x_train, y_train)\ny_pred_clf2 = clf2.predict(x_test)\ny_prob_clf2 = clf2.predict_proba(x_test)\nconf_matrix(y_test, y_pred_clf2)\nget_scores(y_test, y_pred_clf2, y_prob_clf2[:, 1])\n\nacc_svm2 = accuracy_score(y_test, y_pred_clf2)\nf1_svm2 = f1_score(y_test, y_pred_clf2)","kernel":"elastic-searchers","output":{"0":{"data":{"image/png":"0cb6e550e226b777cbae28cc32fe78d196b79d0a","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":48,"start":1655932391967,"state":"done","type":"cell"}
{"cell_type":"code","end":1655932715715,"exec_count":114,"id":"bf1fd1","input":"#coverting target variable (yes/no) into 0s and 1s\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace('no', 0)\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace(' no', 0)\ndiabetes['Diabetic'] = diabetes['Diabetic'].replace('yes', 1)\ndiabetes['Diabetic']","kernel":"elastic-searchers","output":{"0":{"data":{"text/plain":"0      0\n1      0\n2      0\n3      0\n4      0\n      ..\n900    1\n901    1\n902    0\n903    0\n904    1\nName: Diabetic, Length: 905, dtype: int64"},"exec_count":114}},"pos":17,"start":1655932715700,"state":"done","type":"cell"}
{"cell_type":"code","end":1655932754281,"exec_count":120,"id":"e739a3","input":"#cleaning the data -- dropping missing and duplicate values for sanity\ndiabetes.dropna(inplace = True)\ndiabetes = diabetes.reset_index(drop=True)\n\nlength = len(diabetes.index) #save length of array of later\nlength","kernel":"elastic-searchers","output":{"0":{"data":{"text/plain":"905"},"exec_count":120}},"pos":15,"start":1655932754267,"state":"done","type":"cell"}
{"cell_type":"code","end":1655932755357,"exec_count":121,"id":"47815f","input":"#converting categorical variables into dummy variables\ncol_category = ['Age','Gender','Family_Diabetes','highBP','PhysicallyActive','Smoking','Alcohol','RegularMedicine',\n                'JunkFood','Stress','BPLevel','Pdiabetes','UriationFreq']\nfor col in col_category:\n    diabetes = pd.concat([diabetes.drop(col, axis=1), pd.get_dummies(diabetes[col], prefix=col, prefix_sep='_')], axis=1)","kernel":"elastic-searchers","pos":16,"start":1655932755331,"state":"done","type":"cell"}
{"cell_type":"code","end":1655932777608,"exec_count":123,"id":"ac31a1","input":"#Stress and smoking\n\ndf = diabetes \nfig = px.bar(df, x=\"Stress_always\", y=\"Smoking_yes\", barmode=\"group\", color = \"Diabetic\", title=\"Does Smoking affect Stress levels?\")\nfig.show()\nfig.write_html(\"Smoking.html\")","kernel":"elastic-searchers","output":{"0":{"data":{"iframe":"4d57d3bacfa76e8af2171c9466ef8c756bffebbb"}}},"pos":35,"start":1655932777521,"state":"done","type":"cell"}
{"cell_type":"code","end":1655933079133,"exec_count":126,"id":"397795","input":"#Age and Physical Activity\nfig = px.violin(df, x= \"PhysicallyActive_one hr or more\", y=\"Age_60 or older\", color=\"Diabetic\", title = 'Physical Activity Relating to Age in Diabetic and Non Diabetic People')\nfig.show()","kernel":"elastic-searchers","output":{"0":{"data":{"iframe":"e92d3b13db3567bdbeae0f13818a236527a67f5b"}}},"pos":32,"start":1655933079064,"state":"done","type":"cell"}
{"cell_type":"code","end":1655933472496,"exec_count":127,"id":"85995d","input":"# term 1 RANDOM FOREST\nconf_matrix(y_test, y_pred_rfc)\nget_scores(y_test, y_pred_rfc, y_prob_rfc[:, 1])\nacc_rfc = accuracy_score(y_test, y_pred_rfc)\nf1_rfc = f1_score(y_test, y_pred_rfc)\n\nacc_reg = accuracy_score(y_test, y_pred_reg)\nf1_reg = f1_score(y_test, y_pred_reg)","kernel":"elastic-searchers","output":{"0":{"data":{"image/png":"0cb6e550e226b777cbae28cc32fe78d196b79d0a","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":53,"start":1655933472332,"state":"done","type":"cell"}
{"cell_type":"code","end":1655933494915,"exec_count":128,"id":"9d7108","input":"#SVMS\nfrom sklearn import svm\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n\nclf = svm.SVC(C= 0.1, gamma= 1, kernel= 'poly', probability= True)\nclf.fit(x_train,y_train)\ny_pred_clf = clf.predict(x_test)\ny_prob_clf = clf.predict_proba(x_test)\n\nconf_matrix(y_test, y_pred_clf)\nget_scores(y_test, y_pred_clf, y_prob_clf[:, 1])\n\nacc_svm = accuracy_score(y_test, y_pred_clf)\nf1_svm = f1_score(y_test, y_pred_clf)","kernel":"elastic-searchers","output":{"0":{"data":{"image/png":"0cb6e550e226b777cbae28cc32fe78d196b79d0a","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":47,"start":1655933494728,"state":"done","type":"cell"}
{"cell_type":"code","end":1655933554117,"exec_count":130,"id":"58ef44","input":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics\nimport plotly.express as px\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\nimport sys, os","kernel":"elastic-searchers","pos":1,"start":1655933554111,"state":"done","type":"cell"}
{"cell_type":"code","end":1655933556402,"exec_count":131,"id":"d5c7e5","input":"diabetes = pd.read_csv(\"./diabetes_dataset__2019.csv\")","kernel":"elastic-searchers","pos":4,"start":1655933556390,"state":"done","type":"cell"}
{"cell_type":"code","end":1655933572805,"exec_count":133,"id":"d6b3b1","input":"diabetes.dropna(inplace = True)","kernel":"elastic-searchers","pos":9,"start":1655933572791,"state":"done","type":"cell"}
{"cell_type":"code","end":1655933988800,"exec_count":146,"id":"63d4bb","input":"# logistic regression\n# dictionary = {key:value}\n# parameters = {parameter: []}\n# https://stackoverflow.com/questions/19018333/gridsearchcv-on-logisticregression-in-scikit-learn\n\ngrid_params_reg = {'penalty':['l2'],\n                   'C':[1, 10, 100, 1000]}\n\ngs_reg = GridSearchCV(estimator = LogisticRegression(max_iter=500),\n                           param_grid = grid_params_reg,\n                           cv = 5,\n                           verbose=0)\ngs_reg_res = gs_reg.fit(x_train, y_train)\n\n\nprint(gs_reg_res.best_params_)","kernel":"elastic-searchers","output":{"0":{"name":"stdout","text":"{'C': 1, 'penalty': 'l2'}\n"}},"pos":56,"scrolled":true,"start":1655933986810,"state":"done","type":"cell"}
{"cell_type":"code","end":1655934344642,"exec_count":154,"id":"cc7811","input":"#RANDOM FORESTS\nfrom sklearn.ensemble import RandomForestClassifier\n\n# save selected model + tuned hyperparameters inside variable\nrfc = RandomForestClassifier(bootstrap = True, criterion= 'gini', min_samples_split = 2,\n                             min_samples_leaf = 1, max_depth= 5, max_features='sqrt', n_estimators=100)\n\n# fit/train model using training datasets (x_train: features; y_train: target variable)\nrfc.fit(x_train, y_train)\n\n# predict result\ny_pred_rfc = rfc.predict(x_test)\ny_prob_rfc = rfc.predict_proba(x_test)\nconf_matrix(y_test, y_pred_rfc)\nget_scores(y_test, y_pred_rfc, y_prob_rfc[:, 1])\n\nacc_rfc = accuracy_score(y_test, y_pred_rfc)\nf1_rfc = f1_score(y_test, y_pred_rfc)","kernel":"elastic-searchers","output":{"0":{"data":{"image/png":"0cb6e550e226b777cbae28cc32fe78d196b79d0a","text/plain":"<Figure size 216x216 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":50,"start":1655934343898,"state":"done","type":"cell"}
{"cell_type":"code","end":1655934545382,"exec_count":157,"id":"f84403","input":"#JunkFood, Age \ndf= diabetes\nfig = px.bar(df, x=\"Smoking\", y=\"Age_less than 40\", barmode=\"group\", color =\"Diabetic\",\n             title=\"Determining if Junkfood affects Diabetic People\")\nfig.show()\nfig.write_html(\"JunkFood_age_less than 40.html\")\n","kernel":"elastic-searchers","output":{"0":{"ename":"ValueError","evalue":"Value of 'y' is not the name of a column in 'data_frame'. Expected one of ['Age', 'Gender', 'Family_Diabetes', 'highBP', 'PhysicallyActive', 'BMI', 'Smoking', 'Alcohol', 'Sleep', 'SoundSleep', 'RegularMedicine', 'JunkFood', 'Stress', 'BPLevel', 'Pregancies', 'Pdiabetes', 'UriationFreq', 'Diabetic'] but received: Age_less than 40","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [157]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m#JunkFood, Age \u001b[39;00m\n\u001b[1;32m      2\u001b[0m df\u001b[38;5;241m=\u001b[39m diabetes\n\u001b[0;32m----> 3\u001b[0m fig \u001b[38;5;241m=\u001b[39m \u001b[43mpx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbar\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mSmoking\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mAge_less than 40\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbarmode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mgroup\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolor\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mDiabetic\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m      4\u001b[0m \u001b[43m             \u001b[49m\u001b[43mtitle\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mDetermining if Junkfood affects Diabetic People\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      5\u001b[0m fig\u001b[38;5;241m.\u001b[39mshow()\n\u001b[1;32m      6\u001b[0m fig\u001b[38;5;241m.\u001b[39mwrite_html(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mJunkFood_age_less than 40.html\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/plotly/express/_chart_types.py:373\u001b[0m, in \u001b[0;36mbar\u001b[0;34m(data_frame, x, y, color, pattern_shape, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, hover_name, hover_data, custom_data, text, base, error_x, error_x_minus, error_y, error_y_minus, animation_frame, animation_group, category_orders, labels, color_discrete_sequence, color_discrete_map, color_continuous_scale, pattern_shape_sequence, pattern_shape_map, range_color, color_continuous_midpoint, opacity, orientation, barmode, log_x, log_y, range_x, range_y, text_auto, title, template, width, height)\u001b[0m\n\u001b[1;32m    325\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mbar\u001b[39m(\n\u001b[1;32m    326\u001b[0m     data_frame\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    327\u001b[0m     x\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    367\u001b[0m     height\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    368\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m go\u001b[38;5;241m.\u001b[39mFigure:\n\u001b[1;32m    369\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    370\u001b[0m \u001b[38;5;124;03m    In a bar plot, each row of `data_frame` is represented as a rectangular\u001b[39;00m\n\u001b[1;32m    371\u001b[0m \u001b[38;5;124;03m    mark.\u001b[39;00m\n\u001b[1;32m    372\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 373\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mmake_figure\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    374\u001b[0m \u001b[43m        \u001b[49m\u001b[43margs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlocals\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    375\u001b[0m \u001b[43m        \u001b[49m\u001b[43mconstructor\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgo\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mBar\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    376\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtrace_patch\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mdict\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mtextposition\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mauto\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    377\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlayout_patch\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mdict\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mbarmode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbarmode\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    378\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/plotly/express/_core.py:1948\u001b[0m, in \u001b[0;36mmake_figure\u001b[0;34m(args, constructor, trace_patch, layout_patch)\u001b[0m\n\u001b[1;32m   1945\u001b[0m layout_patch \u001b[38;5;241m=\u001b[39m layout_patch \u001b[38;5;129;01mor\u001b[39;00m {}\n\u001b[1;32m   1946\u001b[0m apply_default_cascade(args)\n\u001b[0;32m-> 1948\u001b[0m args \u001b[38;5;241m=\u001b[39m \u001b[43mbuild_dataframe\u001b[49m\u001b[43m(\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconstructor\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1949\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m constructor \u001b[38;5;129;01min\u001b[39;00m [go\u001b[38;5;241m.\u001b[39mTreemap, go\u001b[38;5;241m.\u001b[39mSunburst, go\u001b[38;5;241m.\u001b[39mIcicle] \u001b[38;5;129;01mand\u001b[39;00m args[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpath\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   1950\u001b[0m     args \u001b[38;5;241m=\u001b[39m process_dataframe_hierarchy(args)\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/plotly/express/_core.py:1405\u001b[0m, in \u001b[0;36mbuild_dataframe\u001b[0;34m(args, constructor)\u001b[0m\n\u001b[1;32m   1402\u001b[0m     args[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcolor\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1403\u001b[0m \u001b[38;5;66;03m# now that things have been prepped, we do the systematic rewriting of `args`\u001b[39;00m\n\u001b[0;32m-> 1405\u001b[0m df_output, wide_id_vars \u001b[38;5;241m=\u001b[39m \u001b[43mprocess_args_into_dataframe\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1406\u001b[0m \u001b[43m    \u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mwide_mode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvar_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalue_name\u001b[49m\n\u001b[1;32m   1407\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1409\u001b[0m \u001b[38;5;66;03m# now that `df_output` exists and `args` contains only references, we complete\u001b[39;00m\n\u001b[1;32m   1410\u001b[0m \u001b[38;5;66;03m# the special-case and wide-mode handling by further rewriting args and/or mutating\u001b[39;00m\n\u001b[1;32m   1411\u001b[0m \u001b[38;5;66;03m# df_output\u001b[39;00m\n\u001b[1;32m   1413\u001b[0m count_name \u001b[38;5;241m=\u001b[39m _escape_col_name(df_output, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcount\u001b[39m\u001b[38;5;124m\"\u001b[39m, [var_name, value_name])\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/plotly/express/_core.py:1207\u001b[0m, in \u001b[0;36mprocess_args_into_dataframe\u001b[0;34m(args, wide_mode, var_name, value_name)\u001b[0m\n\u001b[1;32m   1205\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m argument \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mindex\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m   1206\u001b[0m             err_msg \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m To use the index, pass it in directly as `df.index`.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m-> 1207\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(err_msg)\n\u001b[1;32m   1208\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m length \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(df_input[argument]) \u001b[38;5;241m!=\u001b[39m length:\n\u001b[1;32m   1209\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m   1210\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAll arguments should have the same length. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1211\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThe length of column argument `df[\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m]` is \u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[38;5;124m, whereas the \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1218\u001b[0m         )\n\u001b[1;32m   1219\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: Value of 'y' is not the name of a column in 'data_frame'. Expected one of ['Age', 'Gender', 'Family_Diabetes', 'highBP', 'PhysicallyActive', 'BMI', 'Smoking', 'Alcohol', 'Sleep', 'SoundSleep', 'RegularMedicine', 'JunkFood', 'Stress', 'BPLevel', 'Pregancies', 'Pdiabetes', 'UriationFreq', 'Diabetic'] but received: Age_less than 40"]}},"pos":31,"start":1655934545086,"state":"done","type":"cell"}
{"cell_type":"code","end":1655934896223,"exec_count":165,"id":"72d4e4","input":"# Blood Pressure and Alcohol\n\nfig = px.pie(df, values='highBP', names='Alcohol')\n\nfig.show()\nfig.write_html(\"Alcohol and blood pressure\")","kernel":"elastic-searchers","output":{"0":{"data":{"iframe":"49ed09eb3e781250ba6c60cf2779c09a11ef1647"}}},"pos":23,"scrolled":true,"start":1655934896016,"state":"done","type":"cell"}
{"cell_type":"code","id":"089efe","input":"","pos":52,"type":"cell"}
{"cell_type":"code","id":"14ad6b","input":"","pos":19,"type":"cell"}
{"cell_type":"code","id":"5ad7f9","input":"","pos":12,"type":"cell"}
{"cell_type":"code","id":"7abd4f","input":"","pos":43,"type":"cell"}
{"cell_type":"code","id":"7edf91","input":"","pos":42,"type":"cell"}
{"cell_type":"code","id":"89c8b4","input":"","pos":26,"type":"cell"}
{"cell_type":"code","id":"a1d8ec","input":"","pos":46,"type":"cell"}
{"cell_type":"code","id":"f9449c","input":"","pos":63,"type":"cell"}
{"cell_type":"markdown","id":"52caef","input":"### Exploratory Data Analysis\n\n","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"683bd6","input":"### **Data Cleaning**\n\n","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"960c61","input":"graphs","pos":59,"type":"cell"}
{"cell_type":"markdown","id":"bf3b77","input":"### Model fitting\n\n","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"c7b61a","input":"### Load Dataset\n\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"f699ca","input":"### Import Packages\n\n","pos":0,"type":"cell"}
{"end":1655930491786,"exec_count":78,"id":"636784","input":"col_category = ['Gender']\nfor col in col_category:\n    diabetes = pd.concat([diabetes.drop(col, axis=1), pd.get_dummies(diabetes[col], prefix=col, prefix_sep='_')], axis=1)","kernel":"elastic-searchers","pos":10.5,"start":1655930491781,"state":"done","type":"cell"}
{"end":1655933743250,"exec_count":141,"id":"08b9ee","input":"#JunkFood, Age \ndf= diabetes\nfig = px.bar(df, x=\"JunkFood\", y=\"Diabetic\", barmode=\"group\", color =\"Age\",\n             title=\"Determining if Junkfood affects Diabetic People\")\nfig.show()\nfig.write_html(\"JunkFood_AgeGroups.html\")","kernel":"elastic-searchers","output":{"0":{"data":{"iframe":"44f1ceaab88221b16190ec69c05fce22dd9ce534"}}},"pos":13.5,"start":1655933743157,"state":"done","type":"cell"}
{"end":1655934938104,"exec_count":168,"id":"1d51a1","input":"fig = px.bar(df, x=\"Alcohol\", y=\"Age\", color = \"Age\", \n             title=\"\")\nfig.show()\nfig.write_html(\"Alcohol_age.html\")","kernel":"elastic-searchers","output":{"0":{"data":{"iframe":"150e8d209b819a0e8b7ed76998e9bd812a35d503"}}},"pos":30.5,"start":1655934937849,"state":"done","type":"cell"}
{"id":"719f3f","input":"","pos":60.5,"type":"cell"}
{"id":"945d12","input":"","pos":3.5,"type":"cell"}
{"id":0,"time":1655934923073,"type":"user"}
{"last_load":1655922969864,"type":"file"}