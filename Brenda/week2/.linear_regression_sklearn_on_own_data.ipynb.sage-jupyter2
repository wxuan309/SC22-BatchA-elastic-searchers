{"backend_state":"running","connection_file":"/projects/013ca607-9af4-4b8b-9eb4-c9fa83e65e2d/.local/share/jupyter/runtime/kernel-a16e1fe5-93f2-4942-8251-940bf33044ea.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":[],"name":"linear_regression_sklearn_on_own_data.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1655239369993,"exec_count":16,"id":"a71649","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics","kernel":"python3-ubuntu","metadata":{"id":"IecuRdF1a-sG"},"pos":1,"start":1655239369980,"state":"done","type":"cell"}
{"cell_type":"code","end":1655239370021,"exec_count":17,"id":"d2274c","input":"filename = 'diabetes_dataset__2019.csv'\nDiabetes = pd.read_csv(\"./diabetes_dataset__2019.csv\") #TODO: read in your file by replacing the filename variable with your file's path. You can also use this current code to work on an automobile dataset! ","kernel":"python3-ubuntu","metadata":{"id":"mBcweiAXW3bC"},"pos":5,"start":1655239370006,"state":"done","type":"cell"}
{"cell_type":"code","end":1655239370047,"exec_count":18,"id":"e7b9c6","input":"Diabetes.head()","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2n8n7O_8cUxX","outputId":"b1d56a4f-9c74-4cf0-b1eb-055ea2aab14e"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Family_Diabetes</th>\n      <th>highBP</th>\n      <th>PhysicallyActive</th>\n      <th>BMI</th>\n      <th>Smoking</th>\n      <th>Alcohol</th>\n      <th>Sleep</th>\n      <th>SoundSleep</th>\n      <th>RegularMedicine</th>\n      <th>JunkFood</th>\n      <th>Stress</th>\n      <th>BPLevel</th>\n      <th>Pregancies</th>\n      <th>Pdiabetes</th>\n      <th>UriationFreq</th>\n      <th>Diabetic</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>50-59</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>one hr or more</td>\n      <td>39.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>8</td>\n      <td>6</td>\n      <td>no</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>high</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>50-59</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>less than half an hr</td>\n      <td>28.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>8</td>\n      <td>6</td>\n      <td>yes</td>\n      <td>very often</td>\n      <td>sometimes</td>\n      <td>normal</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>40-49</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>no</td>\n      <td>one hr or more</td>\n      <td>24.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>6</td>\n      <td>6</td>\n      <td>no</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>normal</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>50-59</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>no</td>\n      <td>one hr or more</td>\n      <td>23.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>8</td>\n      <td>6</td>\n      <td>no</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>normal</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>40-49</td>\n      <td>Male</td>\n      <td>no</td>\n      <td>no</td>\n      <td>less than half an hr</td>\n      <td>27.0</td>\n      <td>no</td>\n      <td>no</td>\n      <td>8</td>\n      <td>8</td>\n      <td>no</td>\n      <td>occasionally</td>\n      <td>sometimes</td>\n      <td>normal</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>not much</td>\n      <td>no</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     Age Gender Family_Diabetes highBP      PhysicallyActive   BMI Smoking  \\\n0  50-59   Male              no    yes        one hr or more  39.0      no   \n1  50-59   Male              no    yes  less than half an hr  28.0      no   \n2  40-49   Male              no     no        one hr or more  24.0      no   \n3  50-59   Male              no     no        one hr or more  23.0      no   \n4  40-49   Male              no     no  less than half an hr  27.0      no   \n\n  Alcohol  Sleep  SoundSleep RegularMedicine      JunkFood     Stress BPLevel  \\\n0      no      8           6              no  occasionally  sometimes    high   \n1      no      8           6             yes    very often  sometimes  normal   \n2      no      6           6              no  occasionally  sometimes  normal   \n3      no      8           6              no  occasionally  sometimes  normal   \n4      no      8           8              no  occasionally  sometimes  normal   \n\n   Pregancies Pdiabetes UriationFreq Diabetic  \n0         0.0         0     not much       no  \n1         0.0         0     not much       no  \n2         0.0         0     not much       no  \n3         0.0         0     not much       no  \n4         0.0         0     not much       no  "},"exec_count":18}},"pos":6,"start":1655239370029,"state":"done","type":"cell"}
{"cell_type":"code","end":1655239371748,"exec_count":29,"id":"4f89a8","input":"X = Diabetes[\"SoundSleep\"].to_numpy()\ny = Diabetes[\"Sleep\"].to_numpy()","kernel":"python3-ubuntu","pos":27,"start":1655239371740,"state":"done","type":"cell"}
{"cell_type":"code","end":1655239513137,"exec_count":37,"id":"545ec8","input":"#cleaning the data -- dropping missing and duplicate values for sanity\nDiabetes.dropna(inplace = True)\nDiabetes.drop_duplicates(inplace = True)\nDiabetes = Diabetes.reset_index(drop=True)\n\nlength = len(Diabetes.index) #save length of array of later","kernel":"python3-ubuntu","metadata":{"id":"BYHvay0xa-sK"},"pos":7,"start":1655239513118,"state":"done","type":"cell"}
{"cell_type":"code","end":1655239536935,"exec_count":40,"id":"945f28","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"0dc65fc9e60ad138b33e0c0b383008e728ee99f5","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":616},"needs_background":"light"}}},"pos":32,"start":1655239536623,"state":"done","type":"cell"}
{"cell_type":"code","end":1655239542489,"exec_count":41,"id":"f07143","input":"# Checking for Missing Data\nif X.shape[0] != y.shape[0]:\n  print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\n  \nidx = np.arange(length)\nnp.random.shuffle(idx)\n\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\ntest_idx = idx[split_threshold:]\n\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"python3-ubuntu","pos":28,"start":1655239542482,"state":"done","type":"cell"}
{"cell_type":"code","end":1655239546990,"exec_count":42,"id":"c7c8ca","input":"#plotting data i think\nplt.figure(figsize=(10,5))\n\nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"3369d3ff020de2c96f8082d5dd235215adba5f10","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"image/png":{"height":342,"width":616},"needs_background":"light"}}},"pos":29,"start":1655239546295,"state":"done","type":"cell"}
{"cell_type":"code","end":1655239553014,"exec_count":43,"id":"e13df6","input":"from sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"[5.16739049] [0.32503537]\n"}},"pos":30,"start":1655239553005,"state":"done","type":"cell"}
{"cell_type":"code","end":1655239559013,"exec_count":44,"id":"64bddc","input":"y_hat = linr.predict(x_test)","kernel":"python3-ubuntu","pos":31,"start":1655239559009,"state":"done","type":"cell"}
{"cell_type":"code","end":1655241109444,"exec_count":64,"id":"ba8243","input":"sns.heatmap(Diabetes.corr())","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":344},"id":"H7FyJo_QutAX","outputId":"d1ad6159-df64-4882-e2ae-d78cfa814cc5"},"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fe5a5d6bb50>"},"exec_count":64},"1":{"data":{"image/png":"0f3259abe3cea62fbbaba232a4d57c82aacdc2f8","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":595,"width":829},"needs_background":"light"}}},"pos":9,"start":1655241108273,"state":"done","type":"cell"}
{"cell_type":"code","end":1655241231126,"exec_count":67,"id":"ebcae3","input":"X = Diabetes[\"BPLevel_low\"].to_numpy()\ny = Diabetes[\"BMI\"].to_numpy()","kernel":"python3-ubuntu","pos":34,"start":1655241231112,"state":"done","type":"cell"}
{"cell_type":"code","end":1655241235648,"exec_count":68,"id":"8dfc52","input":"# Checking for Missing Data\nif X.shape[0] != y.shape[0]:\n  print(\"i think you should check this data .\")\nelse:\n    print(\"you stink\")\n\nidx = np.arange(length)\nnp.random.shuffle(idx)\n\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\ntest_idx = idx[split_threshold:]\n\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"you stink\n"}},"pos":35,"start":1655241235629,"state":"done","type":"cell"}
{"cell_type":"code","end":1655241239094,"exec_count":69,"id":"2db45a","input":"#plotting data i think\nplt.figure(figsize=(10,5))\n\nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"a34c9d6ebd51c59a52601cf402246450543db5cc","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"image/png":{"height":342,"width":616},"needs_background":"light"}}},"pos":36,"start":1655241238645,"state":"done","type":"cell"}
{"cell_type":"code","end":1655241449282,"exec_count":73,"id":"088032","input":"x = Diabetes[\"BMI\"].to_numpy()\ny = Diabetes[\"Alcohol_no\"].to_numpy()","kernel":"python3-ubuntu","metadata":{"id":"WW77IzOwZaKp"},"pos":11,"start":1655241449256,"state":"done","type":"cell"}
{"cell_type":"code","end":1655241488653,"exec_count":75,"id":"4eee5b","input":"# Checking for Missing Data\nif X.shape[0] != y.shape[0]:\n  print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\nelse:\n    print(\"YOU STINK\")\nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\n# Generates train and test sets and formats them for training.\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"python3-ubuntu","metadata":{"id":"wKS4pvcEsLOF"},"output":{"0":{"name":"stdout","text":"YOU STINK\n"}},"pos":16,"start":1655241488640,"state":"done","type":"cell"}
{"cell_type":"code","end":1655241493152,"exec_count":76,"id":"71b2dd","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the test set \nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"python3-ubuntu","metadata":{"id":"6IxwdW5osUDI"},"output":{"0":{"data":{"image/png":"737f26f9edb4f559d74a55fc7248ea06fb995796","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"image/png":{"height":342,"width":619},"needs_background":"light"}}},"pos":17,"start":1655241492715,"state":"done","type":"cell"}
{"cell_type":"code","end":1655241503153,"exec_count":77,"id":"2318d8","input":"from sklearn.linear_model import LinearRegression\n#Create the model object\nlinr = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jkPf0bt4a-sV","outputId":"99433807-734f-4a07-fe0a-26b3ad2fb709"},"output":{"0":{"name":"stdout","text":"[0.78082192] [0.21917808]\n"}},"pos":19,"start":1655241503132,"state":"done","type":"cell"}
{"cell_type":"code","end":1655241506908,"exec_count":78,"id":"7db2b3","input":"# Predicting using SKLearn\ny_hat = linr.predict(x_test)","kernel":"python3-ubuntu","metadata":{"id":"o9ZDJB1qrJ7_"},"pos":21,"start":1655241506895,"state":"done","type":"cell"}
{"cell_type":"code","end":1655241510973,"exec_count":79,"id":"1cfa7b","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"RarVj0Kor54b","outputId":"c3649dc9-e5f0-4930-f4b1-100ad0987777"},"output":{"0":{"data":{"image/png":"ea0f1d759671844f13fedade27d47622f9054953","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":619},"needs_background":"light"}}},"pos":22,"start":1655241510081,"state":"done","type":"cell"}
{"cell_type":"code","end":1655241517478,"exec_count":80,"id":"4fca6d","input":"print(linr.score(x_test, y_test))","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CS2KN6gms_io","outputId":"4f865d48-e1ea-4e80-ebb1-869f5f2052b0"},"output":{"0":{"name":"stdout","text":"-0.007399096872592104\n"}},"pos":24,"start":1655241517461,"state":"done","type":"cell"}
{"cell_type":"code","end":1655241520431,"exec_count":81,"id":"2556b5","input":"MAE = np.mean(abs(y_test - y_hat))\nMAE","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"osxC5vVotKWS","outputId":"aa7e2d67-12af-4389-e7e0-4c23b23e8bf4"},"output":{"0":{"data":{"text/plain":"0.31521606226573406"},"exec_count":81}},"pos":25,"start":1655241520418,"state":"done","type":"cell"}
{"cell_type":"code","id":"52d5bb","input":"","pos":14,"type":"cell"}
{"cell_type":"code","id":"5c88e7","input":"","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"03f736","input":"### Results and Evaluation\nOne way to see if the model is pretty good is the coefficient of determination (R^2) using the `score()` function. You can read about it here: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression.score.\n\nAnother way is to compare our mean absolute error (MAE). MAE measures the prediction error. Mathematically, it is the average absolute difference between observed and predicted outcomes, MAE = mean(abs(observeds - predicteds)). MAE is less sensitive to outliers compared to RMSE.\n\nRead some more about regression model metrics [here](http://www.sthda.com/english/articles/38-regression-model-validation/158-regression-model-accuracy-metrics-r-square-aic-bic-cp-and-more/).","metadata":{"id":"14TdY4RGr-RG"},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"4636a6","input":"### Split the data\nOur model should ignore 20% of data points to use for testing so it doesn't just memorize the data. We need to make sure there are no missing data points before continuing.","metadata":{"id":"g5Zk8_6ksLur"},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"4a1d53","input":"# Repeat the process!\nTry running linear regression on multiple combinations of features (columns) on your dataset. What combination yields the best score? How does this connect to your correlation chart? ","metadata":{"id":"2OixzlOot-U6"},"pos":26,"type":"cell"}
{"cell_type":"markdown","id":"61299a","input":"# Linear Regression with Scikit-learn's linear regression\n\nWe can use Scikit-Learn’s Linear Regression to fit the model. Most other models we will use in the course \n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html","metadata":{"id":"cbeaQMpna-sR"},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"70d322","input":"pandas docs - https://pandas.pydata.org/docs/reference/index.html#api <br>\nseaborn docs - https://seaborn.pydata.org/api.html","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"7f53bb","input":"# Linear regression using SKLearn on your own Data!\nThis should look familiar... we now are going to use linear regression on some of our own features. I recommend walking through the code below first, then importing your dataset and working through the same problem with your data!","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"8ae880","input":"# Data Loading, Cleaning, and Setup","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"a3e252","input":"### Creating and Fitting","metadata":{"id":"e1m-wKeYsFEl"},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"bdb0df","input":"Linear regression naturally works best on highly correlated data, so I'm going to create a heatmap to see which variables are correlated! ","metadata":{"id":"J3L_hb0Ou4sn"},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"c3e0c8","input":"### Creating Predictions\nPredict outputs on our x_test data that we held out. Think of this as a way to see how the model does on new data!","metadata":{"id":"QFb-_EiFrvzQ"},"pos":20,"type":"cell"}
{"cell_type":"markdown","id":"e01443","input":"np docs - https://numpy.org/doc/stable/reference/index.html#reference","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"fb1520","input":"### Getting to know the problem\n\nFor my data, my columns include `'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin', and 'name'`. \n\nTo start, I would like to create a linear regression model that uses horsepower (X) to predict miles per gallon (y) and see how strong our linear regression model is. For your data, you should choose two columns as well to represent X and y.\n\n","metadata":{"id":"w78dUshNZarz"},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"fdf7b4","input":"Read in your data into a pandas dataframe by replacing the `filename` variable with your file's path. You can also use the current code below to work on a mpg dataset, where the target variable we are predicting is **miles per gallon** based on other car features. \n\n> We should choose two columns that we want to run regresssion on. Use the `.head()` function to decide which columns would be best!\n\n","metadata":{"id":"m4-2ySg9W0Fw"},"pos":3,"type":"cell"}
{"end":1655239930262,"exec_count":53,"id":"cb07d5","input":"X = Diabetes[\"SoundSleep\"].to_numpy()\ny = Diabetes[\"BMI\"].to_numpy()","kernel":"python3-ubuntu","pos":41,"start":1655239930257,"state":"done","type":"cell"}
{"end":1655240102807,"exec_count":56,"id":"7edf9d","input":"from sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"[31.12433948] [-0.9529758]\n"}},"pos":44,"start":1655240102776,"state":"done","type":"cell"}
{"end":1655240118652,"exec_count":57,"id":"3f9dad","input":"y_hat = linr.predict(x_test)","kernel":"python3-ubuntu","pos":45,"start":1655240118628,"state":"done","type":"cell"}
{"end":1655240132942,"exec_count":58,"id":"eacb2c","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"4f3b2158422789a01363b44d1592c857f654ef24","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":616},"needs_background":"light"}}},"pos":46,"start":1655240132572,"state":"done","type":"cell"}
{"end":1655241086854,"exec_count":63,"id":"3f111c","input":"#replacing categorical variables\ncol_category = ['Gender','Family_Diabetes','highBP','PhysicallyActive','Smoking','Alcohol','RegularMedicine','JunkFood','Stress','BPLevel','Pdiabetes','UriationFreq','Diabetic',]\nfor col in col_category:\n    Diabetes = pd.concat([Diabetes.drop(col, axis=1), pd.get_dummies(Diabetes[col], prefix=col, prefix_sep='_')], axis=1)","kernel":"python3-ubuntu","pos":9.5,"start":1655241086815,"state":"done","type":"cell"}
{"end":1655241243974,"exec_count":70,"id":"ff0117","input":"from sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"[25.89545455] [-1.22878788]\n"}},"pos":37,"start":1655241243961,"state":"done","type":"cell"}
{"end":1655241247319,"exec_count":71,"id":"3b796c","input":"y_hat = linr.predict(x_test)","kernel":"python3-ubuntu","pos":38,"start":1655241247308,"state":"done","type":"cell"}
{"end":1655241250818,"exec_count":72,"id":"a5633f","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"dd9cb645e92a417e53b857252497b2f632a4fe6f","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":616},"needs_background":"light"}}},"pos":39,"start":1655241250421,"state":"done","type":"cell"}
{"end":1655241972981,"exec_count":83,"id":"313243","input":"Diabetes.columns","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"Index(['Age', 'BMI', 'Sleep', 'SoundSleep', 'Pregancies', 'Gender_Female',\n       'Gender_Male', 'Family_Diabetes_no', 'Family_Diabetes_yes', 'highBP_no',\n       'highBP_yes', 'PhysicallyActive_less than half an hr',\n       'PhysicallyActive_more than half an hr', 'PhysicallyActive_none',\n       'PhysicallyActive_one hr or more', 'Smoking_no', 'Smoking_yes',\n       'Alcohol_no', 'Alcohol_yes', 'RegularMedicine_no', 'RegularMedicine_o',\n       'RegularMedicine_yes', 'JunkFood_always', 'JunkFood_occasionally',\n       'JunkFood_often', 'JunkFood_very often', 'Stress_always',\n       'Stress_not at all', 'Stress_sometimes', 'Stress_very often',\n       'BPLevel_High', 'BPLevel_Low', 'BPLevel_high', 'BPLevel_low',\n       'BPLevel_normal', 'BPLevel_normal ', 'Pdiabetes_0', 'Pdiabetes_yes',\n       'UriationFreq_not much', 'UriationFreq_quite often', 'Diabetic_ no',\n       'Diabetic_no', 'Diabetic_yes'],\n      dtype='object')"},"exec_count":83}},"pos":47,"start":1655241972974,"state":"done","type":"cell"}
{"exec_count":54,"id":"e7199d","input":"# Missing data Cheeeeeck\nif X.shape[0] != y.shape[0]:\n  print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\nelse:\n    print(\"none here\")\n\nidx = np.arange(length)\nnp.random.shuffle(idx)\n\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\ntest_idx = idx[split_threshold:]\n\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"none here\n"}},"pos":42,"state":"done","type":"cell"}
{"exec_count":55,"id":"4d7330","input":"# ploting points go weee\nplt.figure(figsize=(10,5))\n\nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"5d167ec2b4d84a984b75c88083ea9313061c45f5","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"image/png":{"height":342,"width":616},"needs_background":"light"}}},"pos":43,"state":"done","type":"cell"}
{"exec_count":91,"id":"d2c681","input":"import plotly.express as px\nfig = px.scatter(x=[\"Stress_always\",\"Stress_not at all\",\"Stress_sometimes\"], y=\"Age\")\n\nfig.show()","kernel":"python3-ubuntu","output":{"0":{"ename":"ValueError","evalue":"String or int arguments are only possible when a DataFrame or an array is provided in the `data_frame` argument. No DataFrame was provided, but argument 'y' is of type str or int.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-91-48a93f202be9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mplotly\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpress\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Stress_always\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"Stress_not at all\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"Stress_sometimes\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Age\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/plotly/express/_chart_types.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(data_frame, x, y, color, symbol, size, hover_name, hover_data, custom_data, text, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, error_x, error_x_minus, error_y, error_y_minus, animation_frame, animation_group, category_orders, labels, orientation, color_discrete_sequence, color_discrete_map, color_continuous_scale, range_color, color_continuous_midpoint, symbol_sequence, symbol_map, opacity, size_max, marginal_x, marginal_y, trendline, trendline_options, trendline_color_override, trendline_scope, log_x, log_y, range_x, range_y, render_mode, title, template, width, height)\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0mmark\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0mD\u001b[0m \u001b[0mspace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m     \"\"\"\n\u001b[0;32m---> 66\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mmake_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlocals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconstructor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mScatter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     67\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/plotly/express/_core.py\u001b[0m in \u001b[0;36mmake_figure\u001b[0;34m(args, constructor, trace_patch, layout_patch)\u001b[0m\n\u001b[1;32m   1943\u001b[0m     \u001b[0mapply_default_cascade\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1944\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1945\u001b[0;31m     \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuild_dataframe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconstructor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1946\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mconstructor\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTreemap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSunburst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIcicle\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"path\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1947\u001b[0m         \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocess_dataframe_hierarchy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/plotly/express/_core.py\u001b[0m in \u001b[0;36mbuild_dataframe\u001b[0;34m(args, constructor)\u001b[0m\n\u001b[1;32m   1403\u001b[0m     \u001b[0;31m# now that things have been prepped, we do the systematic rewriting of `args`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1404\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1405\u001b[0;31m     df_output, wide_id_vars = process_args_into_dataframe(\n\u001b[0m\u001b[1;32m   1406\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwide_mode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvar_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue_name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1407\u001b[0m     )\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/plotly/express/_core.py\u001b[0m in \u001b[0;36mprocess_args_into_dataframe\u001b[0;34m(args, wide_mode, var_name, value_name)\u001b[0m\n\u001b[1;32m   1187\u001b[0m                     \u001b[0mdf_output\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcol_name\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_unindexed_series\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreal_argument\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1188\u001b[0m                 \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mdf_provided\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1189\u001b[0;31m                     raise ValueError(\n\u001b[0m\u001b[1;32m   1190\u001b[0m                         \u001b[0;34m\"String or int arguments are only possible when a \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1191\u001b[0m                         \u001b[0;34m\"DataFrame or an array is provided in the `data_frame` \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: String or int arguments are only possible when a DataFrame or an array is provided in the `data_frame` argument. No DataFrame was provided, but argument 'y' is of type str or int."]}},"pos":49,"state":"done","type":"cell"}
{"id":"4d05bd","input":"# BMI and SoundSleep","pos":40,"type":"cell"}
{"id":"b15470","input":"import plotly.express as px\ndf = px.data.gapminder()\n\nfig = px.scatter(df.query(\"year==2007\"), x=\"gdpPercap\", y=\"lifeExp\",\n\t         size=\"pop\", color=\"continent\",\n                 hover_name=\"country\", log_x=True, size_max=60)\nfig.show()","pos":48,"type":"cell"}
{"id":"bc8e1a","input":"","kernel":"python3-ubuntu","pos":50,"type":"cell"}
{"id":"dca92d","input":"","pos":9.75,"type":"cell"}
{"id":0,"time":1655238976699,"type":"user"}
{"last_load":1655238977564,"type":"file"}